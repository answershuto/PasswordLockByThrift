/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class passwordLock {
  public interface Iface {
    /// <summary>
    /// 连接服务器,返回Session
    /// </summary>
    /// <param name="strDevCode">设备编码(加密)</param>
    string connectServer(string strDevCode);
    #if SILVERLIGHT
    IAsyncResult Begin_connectServer(AsyncCallback callback, object state, string strDevCode);
    string End_connectServer(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 输入密码
    /// </summary>
    /// <param name="Session">用户Session</param>
    /// <param name="strPassword">密码</param>
    void inputPasswd(string Session, string strPassword);
    #if SILVERLIGHT
    IAsyncResult Begin_inputPasswd(AsyncCallback callback, object state, string Session, string strPassword);
    void End_inputPasswd(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// 重置密码
    /// </summary>
    /// <param name="Session">加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口</param>
    /// <param name="iLockType">锁类型</param>
    /// <param name="strPassword">密码</param>
    void ResetPasswd(string Session, int iLockType, string strPassword);
    #if SILVERLIGHT
    IAsyncResult Begin_ResetPasswd(AsyncCallback callback, object state, string Session, int iLockType, string strPassword);
    void End_ResetPasswd(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_connectServer(AsyncCallback callback, object state, string strDevCode)
    {
      return send_connectServer(callback, state, strDevCode);
    }

    public string End_connectServer(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_connectServer();
    }

    #endif

    /// <summary>
    /// 连接服务器,返回Session
    /// </summary>
    /// <param name="strDevCode">设备编码(加密)</param>
    public string connectServer(string strDevCode)
    {
      #if !SILVERLIGHT
      send_connectServer(strDevCode);
      return recv_connectServer();

      #else
      var asyncResult = Begin_connectServer(null, null, strDevCode);
      return End_connectServer(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_connectServer(AsyncCallback callback, object state, string strDevCode)
    #else
    public void send_connectServer(string strDevCode)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("connectServer", TMessageType.Call, seqid_));
      connectServer_args args = new connectServer_args();
      args.StrDevCode = strDevCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_connectServer()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      connectServer_result result = new connectServer_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.ex) {
        throw result.Ex;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connectServer failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_inputPasswd(AsyncCallback callback, object state, string Session, string strPassword)
    {
      return send_inputPasswd(callback, state, Session, strPassword);
    }

    public void End_inputPasswd(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_inputPasswd();
    }

    #endif

    /// <summary>
    /// 输入密码
    /// </summary>
    /// <param name="Session">用户Session</param>
    /// <param name="strPassword">密码</param>
    public void inputPasswd(string Session, string strPassword)
    {
      #if !SILVERLIGHT
      send_inputPasswd(Session, strPassword);
      recv_inputPasswd();

      #else
      var asyncResult = Begin_inputPasswd(null, null, Session, strPassword);
      End_inputPasswd(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_inputPasswd(AsyncCallback callback, object state, string Session, string strPassword)
    #else
    public void send_inputPasswd(string Session, string strPassword)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("inputPasswd", TMessageType.Call, seqid_));
      inputPasswd_args args = new inputPasswd_args();
      args.Session = Session;
      args.StrPassword = strPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_inputPasswd()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      inputPasswd_result result = new inputPasswd_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ex) {
        throw result.Ex;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ResetPasswd(AsyncCallback callback, object state, string Session, int iLockType, string strPassword)
    {
      return send_ResetPasswd(callback, state, Session, iLockType, strPassword);
    }

    public void End_ResetPasswd(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_ResetPasswd();
    }

    #endif

    /// <summary>
    /// 重置密码
    /// </summary>
    /// <param name="Session">加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口</param>
    /// <param name="iLockType">锁类型</param>
    /// <param name="strPassword">密码</param>
    public void ResetPasswd(string Session, int iLockType, string strPassword)
    {
      #if !SILVERLIGHT
      send_ResetPasswd(Session, iLockType, strPassword);
      recv_ResetPasswd();

      #else
      var asyncResult = Begin_ResetPasswd(null, null, Session, iLockType, strPassword);
      End_ResetPasswd(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ResetPasswd(AsyncCallback callback, object state, string Session, int iLockType, string strPassword)
    #else
    public void send_ResetPasswd(string Session, int iLockType, string strPassword)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ResetPasswd", TMessageType.Call, seqid_));
      ResetPasswd_args args = new ResetPasswd_args();
      args.Session = Session;
      args.ILockType = iLockType;
      args.StrPassword = strPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_ResetPasswd()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ResetPasswd_result result = new ResetPasswd_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.ex) {
        throw result.Ex;
      }
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["connectServer"] = connectServer_Process;
      processMap_["inputPasswd"] = inputPasswd_Process;
      processMap_["ResetPasswd"] = ResetPasswd_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void connectServer_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      connectServer_args args = new connectServer_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      connectServer_result result = new connectServer_result();
      try {
        result.Success = iface_.connectServer(args.StrDevCode);
      } catch (AirException ex) {
        result.Ex = ex;
      }
      oprot.WriteMessageBegin(new TMessage("connectServer", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void inputPasswd_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      inputPasswd_args args = new inputPasswd_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      inputPasswd_result result = new inputPasswd_result();
      try {
        iface_.inputPasswd(args.Session, args.StrPassword);
      } catch (AirException ex) {
        result.Ex = ex;
      }
      oprot.WriteMessageBegin(new TMessage("inputPasswd", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ResetPasswd_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ResetPasswd_args args = new ResetPasswd_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ResetPasswd_result result = new ResetPasswd_result();
      try {
        iface_.ResetPasswd(args.Session, args.ILockType, args.StrPassword);
      } catch (AirException ex) {
        result.Ex = ex;
      }
      oprot.WriteMessageBegin(new TMessage("ResetPasswd", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class connectServer_args : TBase
  {
    private string _strDevCode;

    /// <summary>
    /// 设备编码(加密)
    /// </summary>
    public string StrDevCode
    {
      get
      {
        return _strDevCode;
      }
      set
      {
        __isset.strDevCode = true;
        this._strDevCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool strDevCode;
    }

    public connectServer_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              StrDevCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("connectServer_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (StrDevCode != null && __isset.strDevCode) {
        field.Name = "strDevCode";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StrDevCode);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("connectServer_args(");
      sb.Append("StrDevCode: ");
      sb.Append(StrDevCode);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class connectServer_result : TBase
  {
    private string _success;
    private AirException _ex;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    /// <summary>
    /// 抛出异常
    /// </summary>
    public AirException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool ex;
    }

    public connectServer_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Ex = new AirException();
              Ex.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("connectServer_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ex) {
        if (Ex != null) {
          field.Name = "Ex";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("connectServer_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Ex: ");
      sb.Append(Ex== null ? "<null>" : Ex.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inputPasswd_args : TBase
  {
    private string _Session;
    private string _strPassword;

    /// <summary>
    /// 用户Session
    /// </summary>
    public string Session
    {
      get
      {
        return _Session;
      }
      set
      {
        __isset.Session = true;
        this._Session = value;
      }
    }

    /// <summary>
    /// 密码
    /// </summary>
    public string StrPassword
    {
      get
      {
        return _strPassword;
      }
      set
      {
        __isset.strPassword = true;
        this._strPassword = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Session;
      public bool strPassword;
    }

    public inputPasswd_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Session = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              StrPassword = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("inputPasswd_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Session != null && __isset.Session) {
        field.Name = "Session";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Session);
        oprot.WriteFieldEnd();
      }
      if (StrPassword != null && __isset.strPassword) {
        field.Name = "strPassword";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StrPassword);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("inputPasswd_args(");
      sb.Append("Session: ");
      sb.Append(Session);
      sb.Append(",StrPassword: ");
      sb.Append(StrPassword);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inputPasswd_result : TBase
  {
    private AirException _ex;

    /// <summary>
    /// 抛出异常
    /// </summary>
    public AirException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ex;
    }

    public inputPasswd_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Ex = new AirException();
              Ex.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("inputPasswd_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.ex) {
        if (Ex != null) {
          field.Name = "Ex";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("inputPasswd_result(");
      sb.Append("Ex: ");
      sb.Append(Ex== null ? "<null>" : Ex.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ResetPasswd_args : TBase
  {
    private string _Session;
    private int _iLockType;
    private string _strPassword;

    /// <summary>
    /// 加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口
    /// </summary>
    public string Session
    {
      get
      {
        return _Session;
      }
      set
      {
        __isset.Session = true;
        this._Session = value;
      }
    }

    /// <summary>
    /// 锁类型
    /// </summary>
    public int ILockType
    {
      get
      {
        return _iLockType;
      }
      set
      {
        __isset.iLockType = true;
        this._iLockType = value;
      }
    }

    /// <summary>
    /// 密码
    /// </summary>
    public string StrPassword
    {
      get
      {
        return _strPassword;
      }
      set
      {
        __isset.strPassword = true;
        this._strPassword = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Session;
      public bool iLockType;
      public bool strPassword;
    }

    public ResetPasswd_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Session = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ILockType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              StrPassword = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResetPasswd_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Session != null && __isset.Session) {
        field.Name = "Session";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Session);
        oprot.WriteFieldEnd();
      }
      if (__isset.iLockType) {
        field.Name = "iLockType";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ILockType);
        oprot.WriteFieldEnd();
      }
      if (StrPassword != null && __isset.strPassword) {
        field.Name = "strPassword";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StrPassword);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ResetPasswd_args(");
      sb.Append("Session: ");
      sb.Append(Session);
      sb.Append(",ILockType: ");
      sb.Append(ILockType);
      sb.Append(",StrPassword: ");
      sb.Append(StrPassword);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ResetPasswd_result : TBase
  {
    private AirException _ex;

    /// <summary>
    /// 抛出异常
    /// </summary>
    public AirException Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ex;
    }

    public ResetPasswd_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Ex = new AirException();
              Ex.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResetPasswd_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.ex) {
        if (Ex != null) {
          field.Name = "Ex";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Ex.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ResetPasswd_result(");
      sb.Append("Ex: ");
      sb.Append(Ex== null ? "<null>" : Ex.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
