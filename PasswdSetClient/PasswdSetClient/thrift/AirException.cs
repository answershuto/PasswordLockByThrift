/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// 调用错误
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class AirException : TException, TBase
{

  /// <summary>
  /// 错误类型
  /// 
  /// <seealso cref="AirExceptionType"/>
  /// </summary>
  public AirExceptionType Type { get; set; }

  /// <summary>
  /// 错误码
  /// </summary>
  public long ErrorCode { get; set; }

  /// <summary>
  /// 错误消息
  /// </summary>
  public string ErrorMessage { get; set; }

  /// <summary>
  /// 调试信息
  /// </summary>
  public string DebugMessage { get; set; }

  public AirException() {
  }

  public AirException(AirExceptionType type, long errorCode, string errorMessage, string debugMessage) : this() {
    this.Type = type;
    this.ErrorCode = errorCode;
    this.ErrorMessage = errorMessage;
    this.DebugMessage = debugMessage;
  }

  public void Read (TProtocol iprot)
  {
    bool isset_type = false;
    bool isset_errorCode = false;
    bool isset_errorMessage = false;
    bool isset_debugMessage = false;
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I32) {
            Type = (AirExceptionType)iprot.ReadI32();
            isset_type = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I64) {
            ErrorCode = iprot.ReadI64();
            isset_errorCode = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            ErrorMessage = iprot.ReadString();
            isset_errorMessage = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.String) {
            DebugMessage = iprot.ReadString();
            isset_debugMessage = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
    if (!isset_type)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_errorCode)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_errorMessage)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
    if (!isset_debugMessage)
      throw new TProtocolException(TProtocolException.INVALID_DATA);
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("AirException");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    field.Name = "type";
    field.Type = TType.I32;
    field.ID = 1;
    oprot.WriteFieldBegin(field);
    oprot.WriteI32((int)Type);
    oprot.WriteFieldEnd();
    field.Name = "errorCode";
    field.Type = TType.I64;
    field.ID = 2;
    oprot.WriteFieldBegin(field);
    oprot.WriteI64(ErrorCode);
    oprot.WriteFieldEnd();
    field.Name = "errorMessage";
    field.Type = TType.String;
    field.ID = 3;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(ErrorMessage);
    oprot.WriteFieldEnd();
    field.Name = "debugMessage";
    field.Type = TType.String;
    field.ID = 4;
    oprot.WriteFieldBegin(field);
    oprot.WriteString(DebugMessage);
    oprot.WriteFieldEnd();
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("AirException(");
    sb.Append("Type: ");
    sb.Append(Type);
    sb.Append(",ErrorCode: ");
    sb.Append(ErrorCode);
    sb.Append(",ErrorMessage: ");
    sb.Append(ErrorMessage);
    sb.Append(",DebugMessage: ");
    sb.Append(DebugMessage);
    sb.Append(")");
    return sb.ToString();
  }

}

