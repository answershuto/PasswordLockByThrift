/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "mythrift_types.h"

#include <algorithm>



int _kAirExceptionTypeValues[] = {
  AirExceptionType::PASSWD_EXCEPTION,
  AirExceptionType::USER_DIONLINE
};
const char* _kAirExceptionTypeNames[] = {
  "PASSWD_EXCEPTION",
  "USER_DIONLINE"
};
const std::map<int, const char*> _AirExceptionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAirExceptionTypeValues, _kAirExceptionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* AirException::ascii_fingerprint = "896B057104D7399B13F265CB3CF2EAA6";
const uint8_t AirException::binary_fingerprint[16] = {0x89,0x6B,0x05,0x71,0x04,0xD7,0x39,0x9B,0x13,0xF2,0x65,0xCB,0x3C,0xF2,0xEA,0xA6};

uint32_t AirException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_errorCode = false;
  bool isset_errorMessage = false;
  bool isset_debugMessage = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (AirExceptionType::type)ecast0;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->errorCode);
          isset_errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMessage);
          isset_errorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->debugMessage);
          isset_debugMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_errorCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_errorMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_debugMessage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AirException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AirException");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->errorMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("debugMessage", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->debugMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AirException &a, AirException &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.errorCode, b.errorCode);
  swap(a.errorMessage, b.errorMessage);
  swap(a.debugMessage, b.debugMessage);
}


