/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef passwordLock_H
#define passwordLock_H

#include <thrift/TDispatchProcessor.h>
#include "mythrift_types.h"



class passwordLockIf {
 public:
  virtual ~passwordLockIf() {}
  virtual void connectServer(std::string& _return, const std::string& strDevCode) = 0;
  virtual void disconnectServer(const std::string& Session) = 0;
  virtual void keepAlive(const std::string& Session) = 0;
  virtual void inputPasswd(const std::string& Session, const int32_t iLockType, const std::string& strPassword) = 0;
  virtual void ResetPasswd(const std::string& strDevCode, const int32_t iLockType, const std::string& strPassword) = 0;
  virtual void modifyPasswd(const std::string& strOldPasswd, const std::string& strNewPasswd, const int32_t iLockType) = 0;
};

class passwordLockIfFactory {
 public:
  typedef passwordLockIf Handler;

  virtual ~passwordLockIfFactory() {}

  virtual passwordLockIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(passwordLockIf* /* handler */) = 0;
};

class passwordLockIfSingletonFactory : virtual public passwordLockIfFactory {
 public:
  passwordLockIfSingletonFactory(const boost::shared_ptr<passwordLockIf>& iface) : iface_(iface) {}
  virtual ~passwordLockIfSingletonFactory() {}

  virtual passwordLockIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(passwordLockIf* /* handler */) {}

 protected:
  boost::shared_ptr<passwordLockIf> iface_;
};

class passwordLockNull : virtual public passwordLockIf {
 public:
  virtual ~passwordLockNull() {}
  void connectServer(std::string& /* _return */, const std::string& /* strDevCode */) {
    return;
  }
  void disconnectServer(const std::string& /* Session */) {
    return;
  }
  void keepAlive(const std::string& /* Session */) {
    return;
  }
  void inputPasswd(const std::string& /* Session */, const int32_t /* iLockType */, const std::string& /* strPassword */) {
    return;
  }
  void ResetPasswd(const std::string& /* strDevCode */, const int32_t /* iLockType */, const std::string& /* strPassword */) {
    return;
  }
  void modifyPasswd(const std::string& /* strOldPasswd */, const std::string& /* strNewPasswd */, const int32_t /* iLockType */) {
    return;
  }
};

typedef struct _passwordLock_connectServer_args__isset {
  _passwordLock_connectServer_args__isset() : strDevCode(false) {}
  bool strDevCode;
} _passwordLock_connectServer_args__isset;

class passwordLock_connectServer_args {
 public:

  passwordLock_connectServer_args() : strDevCode() {
  }

  virtual ~passwordLock_connectServer_args() throw() {}

  std::string strDevCode;

  _passwordLock_connectServer_args__isset __isset;

  void __set_strDevCode(const std::string& val) {
    strDevCode = val;
  }

  bool operator == (const passwordLock_connectServer_args & rhs) const
  {
    if (!(strDevCode == rhs.strDevCode))
      return false;
    return true;
  }
  bool operator != (const passwordLock_connectServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_connectServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class passwordLock_connectServer_pargs {
 public:


  virtual ~passwordLock_connectServer_pargs() throw() {}

  const std::string* strDevCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_connectServer_result__isset {
  _passwordLock_connectServer_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _passwordLock_connectServer_result__isset;

class passwordLock_connectServer_result {
 public:

  passwordLock_connectServer_result() : success() {
  }

  virtual ~passwordLock_connectServer_result() throw() {}

  std::string success;
  AirException ex;

  _passwordLock_connectServer_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ex(const AirException& val) {
    ex = val;
  }

  bool operator == (const passwordLock_connectServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const passwordLock_connectServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_connectServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_connectServer_presult__isset {
  _passwordLock_connectServer_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _passwordLock_connectServer_presult__isset;

class passwordLock_connectServer_presult {
 public:


  virtual ~passwordLock_connectServer_presult() throw() {}

  std::string* success;
  AirException ex;

  _passwordLock_connectServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _passwordLock_disconnectServer_args__isset {
  _passwordLock_disconnectServer_args__isset() : Session(false) {}
  bool Session;
} _passwordLock_disconnectServer_args__isset;

class passwordLock_disconnectServer_args {
 public:

  passwordLock_disconnectServer_args() : Session() {
  }

  virtual ~passwordLock_disconnectServer_args() throw() {}

  std::string Session;

  _passwordLock_disconnectServer_args__isset __isset;

  void __set_Session(const std::string& val) {
    Session = val;
  }

  bool operator == (const passwordLock_disconnectServer_args & rhs) const
  {
    if (!(Session == rhs.Session))
      return false;
    return true;
  }
  bool operator != (const passwordLock_disconnectServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_disconnectServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class passwordLock_disconnectServer_pargs {
 public:


  virtual ~passwordLock_disconnectServer_pargs() throw() {}

  const std::string* Session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_disconnectServer_result__isset {
  _passwordLock_disconnectServer_result__isset() : ex(false) {}
  bool ex;
} _passwordLock_disconnectServer_result__isset;

class passwordLock_disconnectServer_result {
 public:

  passwordLock_disconnectServer_result() {
  }

  virtual ~passwordLock_disconnectServer_result() throw() {}

  AirException ex;

  _passwordLock_disconnectServer_result__isset __isset;

  void __set_ex(const AirException& val) {
    ex = val;
  }

  bool operator == (const passwordLock_disconnectServer_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const passwordLock_disconnectServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_disconnectServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_disconnectServer_presult__isset {
  _passwordLock_disconnectServer_presult__isset() : ex(false) {}
  bool ex;
} _passwordLock_disconnectServer_presult__isset;

class passwordLock_disconnectServer_presult {
 public:


  virtual ~passwordLock_disconnectServer_presult() throw() {}

  AirException ex;

  _passwordLock_disconnectServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _passwordLock_keepAlive_args__isset {
  _passwordLock_keepAlive_args__isset() : Session(false) {}
  bool Session;
} _passwordLock_keepAlive_args__isset;

class passwordLock_keepAlive_args {
 public:

  passwordLock_keepAlive_args() : Session() {
  }

  virtual ~passwordLock_keepAlive_args() throw() {}

  std::string Session;

  _passwordLock_keepAlive_args__isset __isset;

  void __set_Session(const std::string& val) {
    Session = val;
  }

  bool operator == (const passwordLock_keepAlive_args & rhs) const
  {
    if (!(Session == rhs.Session))
      return false;
    return true;
  }
  bool operator != (const passwordLock_keepAlive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_keepAlive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class passwordLock_keepAlive_pargs {
 public:


  virtual ~passwordLock_keepAlive_pargs() throw() {}

  const std::string* Session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_keepAlive_result__isset {
  _passwordLock_keepAlive_result__isset() : ex(false) {}
  bool ex;
} _passwordLock_keepAlive_result__isset;

class passwordLock_keepAlive_result {
 public:

  passwordLock_keepAlive_result() {
  }

  virtual ~passwordLock_keepAlive_result() throw() {}

  AirException ex;

  _passwordLock_keepAlive_result__isset __isset;

  void __set_ex(const AirException& val) {
    ex = val;
  }

  bool operator == (const passwordLock_keepAlive_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const passwordLock_keepAlive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_keepAlive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_keepAlive_presult__isset {
  _passwordLock_keepAlive_presult__isset() : ex(false) {}
  bool ex;
} _passwordLock_keepAlive_presult__isset;

class passwordLock_keepAlive_presult {
 public:


  virtual ~passwordLock_keepAlive_presult() throw() {}

  AirException ex;

  _passwordLock_keepAlive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _passwordLock_inputPasswd_args__isset {
  _passwordLock_inputPasswd_args__isset() : Session(false), iLockType(false), strPassword(false) {}
  bool Session;
  bool iLockType;
  bool strPassword;
} _passwordLock_inputPasswd_args__isset;

class passwordLock_inputPasswd_args {
 public:

  passwordLock_inputPasswd_args() : Session(), iLockType(0), strPassword() {
  }

  virtual ~passwordLock_inputPasswd_args() throw() {}

  std::string Session;
  int32_t iLockType;
  std::string strPassword;

  _passwordLock_inputPasswd_args__isset __isset;

  void __set_Session(const std::string& val) {
    Session = val;
  }

  void __set_iLockType(const int32_t val) {
    iLockType = val;
  }

  void __set_strPassword(const std::string& val) {
    strPassword = val;
  }

  bool operator == (const passwordLock_inputPasswd_args & rhs) const
  {
    if (!(Session == rhs.Session))
      return false;
    if (!(iLockType == rhs.iLockType))
      return false;
    if (!(strPassword == rhs.strPassword))
      return false;
    return true;
  }
  bool operator != (const passwordLock_inputPasswd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_inputPasswd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class passwordLock_inputPasswd_pargs {
 public:


  virtual ~passwordLock_inputPasswd_pargs() throw() {}

  const std::string* Session;
  const int32_t* iLockType;
  const std::string* strPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_inputPasswd_result__isset {
  _passwordLock_inputPasswd_result__isset() : ex(false) {}
  bool ex;
} _passwordLock_inputPasswd_result__isset;

class passwordLock_inputPasswd_result {
 public:

  passwordLock_inputPasswd_result() {
  }

  virtual ~passwordLock_inputPasswd_result() throw() {}

  AirException ex;

  _passwordLock_inputPasswd_result__isset __isset;

  void __set_ex(const AirException& val) {
    ex = val;
  }

  bool operator == (const passwordLock_inputPasswd_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const passwordLock_inputPasswd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_inputPasswd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_inputPasswd_presult__isset {
  _passwordLock_inputPasswd_presult__isset() : ex(false) {}
  bool ex;
} _passwordLock_inputPasswd_presult__isset;

class passwordLock_inputPasswd_presult {
 public:


  virtual ~passwordLock_inputPasswd_presult() throw() {}

  AirException ex;

  _passwordLock_inputPasswd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _passwordLock_ResetPasswd_args__isset {
  _passwordLock_ResetPasswd_args__isset() : strDevCode(false), iLockType(false), strPassword(false) {}
  bool strDevCode;
  bool iLockType;
  bool strPassword;
} _passwordLock_ResetPasswd_args__isset;

class passwordLock_ResetPasswd_args {
 public:

  passwordLock_ResetPasswd_args() : strDevCode(), iLockType(0), strPassword() {
  }

  virtual ~passwordLock_ResetPasswd_args() throw() {}

  std::string strDevCode;
  int32_t iLockType;
  std::string strPassword;

  _passwordLock_ResetPasswd_args__isset __isset;

  void __set_strDevCode(const std::string& val) {
    strDevCode = val;
  }

  void __set_iLockType(const int32_t val) {
    iLockType = val;
  }

  void __set_strPassword(const std::string& val) {
    strPassword = val;
  }

  bool operator == (const passwordLock_ResetPasswd_args & rhs) const
  {
    if (!(strDevCode == rhs.strDevCode))
      return false;
    if (!(iLockType == rhs.iLockType))
      return false;
    if (!(strPassword == rhs.strPassword))
      return false;
    return true;
  }
  bool operator != (const passwordLock_ResetPasswd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_ResetPasswd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class passwordLock_ResetPasswd_pargs {
 public:


  virtual ~passwordLock_ResetPasswd_pargs() throw() {}

  const std::string* strDevCode;
  const int32_t* iLockType;
  const std::string* strPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_ResetPasswd_result__isset {
  _passwordLock_ResetPasswd_result__isset() : ex(false) {}
  bool ex;
} _passwordLock_ResetPasswd_result__isset;

class passwordLock_ResetPasswd_result {
 public:

  passwordLock_ResetPasswd_result() {
  }

  virtual ~passwordLock_ResetPasswd_result() throw() {}

  AirException ex;

  _passwordLock_ResetPasswd_result__isset __isset;

  void __set_ex(const AirException& val) {
    ex = val;
  }

  bool operator == (const passwordLock_ResetPasswd_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const passwordLock_ResetPasswd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_ResetPasswd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_ResetPasswd_presult__isset {
  _passwordLock_ResetPasswd_presult__isset() : ex(false) {}
  bool ex;
} _passwordLock_ResetPasswd_presult__isset;

class passwordLock_ResetPasswd_presult {
 public:


  virtual ~passwordLock_ResetPasswd_presult() throw() {}

  AirException ex;

  _passwordLock_ResetPasswd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _passwordLock_modifyPasswd_args__isset {
  _passwordLock_modifyPasswd_args__isset() : strOldPasswd(false), strNewPasswd(false), iLockType(false) {}
  bool strOldPasswd;
  bool strNewPasswd;
  bool iLockType;
} _passwordLock_modifyPasswd_args__isset;

class passwordLock_modifyPasswd_args {
 public:

  passwordLock_modifyPasswd_args() : strOldPasswd(), strNewPasswd(), iLockType(0) {
  }

  virtual ~passwordLock_modifyPasswd_args() throw() {}

  std::string strOldPasswd;
  std::string strNewPasswd;
  int32_t iLockType;

  _passwordLock_modifyPasswd_args__isset __isset;

  void __set_strOldPasswd(const std::string& val) {
    strOldPasswd = val;
  }

  void __set_strNewPasswd(const std::string& val) {
    strNewPasswd = val;
  }

  void __set_iLockType(const int32_t val) {
    iLockType = val;
  }

  bool operator == (const passwordLock_modifyPasswd_args & rhs) const
  {
    if (!(strOldPasswd == rhs.strOldPasswd))
      return false;
    if (!(strNewPasswd == rhs.strNewPasswd))
      return false;
    if (!(iLockType == rhs.iLockType))
      return false;
    return true;
  }
  bool operator != (const passwordLock_modifyPasswd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_modifyPasswd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class passwordLock_modifyPasswd_pargs {
 public:


  virtual ~passwordLock_modifyPasswd_pargs() throw() {}

  const std::string* strOldPasswd;
  const std::string* strNewPasswd;
  const int32_t* iLockType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_modifyPasswd_result__isset {
  _passwordLock_modifyPasswd_result__isset() : ex(false) {}
  bool ex;
} _passwordLock_modifyPasswd_result__isset;

class passwordLock_modifyPasswd_result {
 public:

  passwordLock_modifyPasswd_result() {
  }

  virtual ~passwordLock_modifyPasswd_result() throw() {}

  AirException ex;

  _passwordLock_modifyPasswd_result__isset __isset;

  void __set_ex(const AirException& val) {
    ex = val;
  }

  bool operator == (const passwordLock_modifyPasswd_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const passwordLock_modifyPasswd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const passwordLock_modifyPasswd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _passwordLock_modifyPasswd_presult__isset {
  _passwordLock_modifyPasswd_presult__isset() : ex(false) {}
  bool ex;
} _passwordLock_modifyPasswd_presult__isset;

class passwordLock_modifyPasswd_presult {
 public:


  virtual ~passwordLock_modifyPasswd_presult() throw() {}

  AirException ex;

  _passwordLock_modifyPasswd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class passwordLockClient : virtual public passwordLockIf {
 public:
  passwordLockClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  passwordLockClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void connectServer(std::string& _return, const std::string& strDevCode);
  void send_connectServer(const std::string& strDevCode);
  void recv_connectServer(std::string& _return);
  void disconnectServer(const std::string& Session);
  void send_disconnectServer(const std::string& Session);
  void recv_disconnectServer();
  void keepAlive(const std::string& Session);
  void send_keepAlive(const std::string& Session);
  void recv_keepAlive();
  void inputPasswd(const std::string& Session, const int32_t iLockType, const std::string& strPassword);
  void send_inputPasswd(const std::string& Session, const int32_t iLockType, const std::string& strPassword);
  void recv_inputPasswd();
  void ResetPasswd(const std::string& strDevCode, const int32_t iLockType, const std::string& strPassword);
  void send_ResetPasswd(const std::string& strDevCode, const int32_t iLockType, const std::string& strPassword);
  void recv_ResetPasswd();
  void modifyPasswd(const std::string& strOldPasswd, const std::string& strNewPasswd, const int32_t iLockType);
  void send_modifyPasswd(const std::string& strOldPasswd, const std::string& strNewPasswd, const int32_t iLockType);
  void recv_modifyPasswd();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class passwordLockProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<passwordLockIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (passwordLockProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connectServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnectServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_keepAlive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_inputPasswd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResetPasswd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_modifyPasswd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  passwordLockProcessor(boost::shared_ptr<passwordLockIf> iface) :
    iface_(iface) {
    processMap_["connectServer"] = &passwordLockProcessor::process_connectServer;
    processMap_["disconnectServer"] = &passwordLockProcessor::process_disconnectServer;
    processMap_["keepAlive"] = &passwordLockProcessor::process_keepAlive;
    processMap_["inputPasswd"] = &passwordLockProcessor::process_inputPasswd;
    processMap_["ResetPasswd"] = &passwordLockProcessor::process_ResetPasswd;
    processMap_["modifyPasswd"] = &passwordLockProcessor::process_modifyPasswd;
  }

  virtual ~passwordLockProcessor() {}
};

class passwordLockProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  passwordLockProcessorFactory(const ::boost::shared_ptr< passwordLockIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< passwordLockIfFactory > handlerFactory_;
};

class passwordLockMultiface : virtual public passwordLockIf {
 public:
  passwordLockMultiface(std::vector<boost::shared_ptr<passwordLockIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~passwordLockMultiface() {}
 protected:
  std::vector<boost::shared_ptr<passwordLockIf> > ifaces_;
  passwordLockMultiface() {}
  void add(boost::shared_ptr<passwordLockIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void connectServer(std::string& _return, const std::string& strDevCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connectServer(_return, strDevCode);
    }
    ifaces_[i]->connectServer(_return, strDevCode);
    return;
  }

  void disconnectServer(const std::string& Session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnectServer(Session);
    }
    ifaces_[i]->disconnectServer(Session);
  }

  void keepAlive(const std::string& Session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->keepAlive(Session);
    }
    ifaces_[i]->keepAlive(Session);
  }

  void inputPasswd(const std::string& Session, const int32_t iLockType, const std::string& strPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->inputPasswd(Session, iLockType, strPassword);
    }
    ifaces_[i]->inputPasswd(Session, iLockType, strPassword);
  }

  void ResetPasswd(const std::string& strDevCode, const int32_t iLockType, const std::string& strPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResetPasswd(strDevCode, iLockType, strPassword);
    }
    ifaces_[i]->ResetPasswd(strDevCode, iLockType, strPassword);
  }

  void modifyPasswd(const std::string& strOldPasswd, const std::string& strNewPasswd, const int32_t iLockType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->modifyPasswd(strOldPasswd, strNewPasswd, iLockType);
    }
    ifaces_[i]->modifyPasswd(strOldPasswd, strNewPasswd, iLockType);
  }

};



#endif
