#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def connectServer(self, strDevCode):
    """
    连接服务器,返回Session

    Parameters:
     - strDevCode: 设备编码(加密)
    """
    pass

  def disconnectServer(self, Session):
    """
    与服务器断开连接

    Parameters:
     - Session: 用户Session
    """
    pass

  def keepAlive(self, Session):
    """
    保活

    Parameters:
     - Session: 用户Session
    """
    pass

  def inputPasswd(self, Session, iLockType, strPassword):
    """
    输入密码

    Parameters:
     - Session: 用户Session
     - iLockType: 锁类型
     - strPassword: 密码
    """
    pass

  def ResetPasswd(self, strDevCode, iLockType, strPassword):
    """
    重置密码

    Parameters:
     - strDevCode: 加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口
     - iLockType: 锁类型
     - strPassword: 密码
    """
    pass

  def modifyPasswd(self, strOldPasswd, strNewPasswd, iLockType):
    """
    修改密码

    Parameters:
     - strOldPasswd
     - strNewPasswd
     - iLockType: 锁类型
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def connectServer(self, strDevCode):
    """
    连接服务器,返回Session

    Parameters:
     - strDevCode: 设备编码(加密)
    """
    self.send_connectServer(strDevCode)
    return self.recv_connectServer()

  def send_connectServer(self, strDevCode):
    self._oprot.writeMessageBegin('connectServer', TMessageType.CALL, self._seqid)
    args = connectServer_args()
    args.strDevCode = strDevCode
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_connectServer(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = connectServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "connectServer failed: unknown result");

  def disconnectServer(self, Session):
    """
    与服务器断开连接

    Parameters:
     - Session: 用户Session
    """
    self.send_disconnectServer(Session)
    self.recv_disconnectServer()

  def send_disconnectServer(self, Session):
    self._oprot.writeMessageBegin('disconnectServer', TMessageType.CALL, self._seqid)
    args = disconnectServer_args()
    args.Session = Session
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_disconnectServer(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = disconnectServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    return

  def keepAlive(self, Session):
    """
    保活

    Parameters:
     - Session: 用户Session
    """
    self.send_keepAlive(Session)
    self.recv_keepAlive()

  def send_keepAlive(self, Session):
    self._oprot.writeMessageBegin('keepAlive', TMessageType.CALL, self._seqid)
    args = keepAlive_args()
    args.Session = Session
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_keepAlive(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = keepAlive_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    return

  def inputPasswd(self, Session, iLockType, strPassword):
    """
    输入密码

    Parameters:
     - Session: 用户Session
     - iLockType: 锁类型
     - strPassword: 密码
    """
    self.send_inputPasswd(Session, iLockType, strPassword)
    self.recv_inputPasswd()

  def send_inputPasswd(self, Session, iLockType, strPassword):
    self._oprot.writeMessageBegin('inputPasswd', TMessageType.CALL, self._seqid)
    args = inputPasswd_args()
    args.Session = Session
    args.iLockType = iLockType
    args.strPassword = strPassword
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_inputPasswd(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = inputPasswd_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    return

  def ResetPasswd(self, strDevCode, iLockType, strPassword):
    """
    重置密码

    Parameters:
     - strDevCode: 加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口
     - iLockType: 锁类型
     - strPassword: 密码
    """
    self.send_ResetPasswd(strDevCode, iLockType, strPassword)
    self.recv_ResetPasswd()

  def send_ResetPasswd(self, strDevCode, iLockType, strPassword):
    self._oprot.writeMessageBegin('ResetPasswd', TMessageType.CALL, self._seqid)
    args = ResetPasswd_args()
    args.strDevCode = strDevCode
    args.iLockType = iLockType
    args.strPassword = strPassword
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ResetPasswd(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = ResetPasswd_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    return

  def modifyPasswd(self, strOldPasswd, strNewPasswd, iLockType):
    """
    修改密码

    Parameters:
     - strOldPasswd
     - strNewPasswd
     - iLockType: 锁类型
    """
    self.send_modifyPasswd(strOldPasswd, strNewPasswd, iLockType)
    self.recv_modifyPasswd()

  def send_modifyPasswd(self, strOldPasswd, strNewPasswd, iLockType):
    self._oprot.writeMessageBegin('modifyPasswd', TMessageType.CALL, self._seqid)
    args = modifyPasswd_args()
    args.strOldPasswd = strOldPasswd
    args.strNewPasswd = strNewPasswd
    args.iLockType = iLockType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_modifyPasswd(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = modifyPasswd_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.ex is not None:
      raise result.ex
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["connectServer"] = Processor.process_connectServer
    self._processMap["disconnectServer"] = Processor.process_disconnectServer
    self._processMap["keepAlive"] = Processor.process_keepAlive
    self._processMap["inputPasswd"] = Processor.process_inputPasswd
    self._processMap["ResetPasswd"] = Processor.process_ResetPasswd
    self._processMap["modifyPasswd"] = Processor.process_modifyPasswd

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_connectServer(self, seqid, iprot, oprot):
    args = connectServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = connectServer_result()
    try:
      result.success = self._handler.connectServer(args.strDevCode)
    except AirException, ex:
      result.ex = ex
    oprot.writeMessageBegin("connectServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_disconnectServer(self, seqid, iprot, oprot):
    args = disconnectServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = disconnectServer_result()
    try:
      self._handler.disconnectServer(args.Session)
    except AirException, ex:
      result.ex = ex
    oprot.writeMessageBegin("disconnectServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_keepAlive(self, seqid, iprot, oprot):
    args = keepAlive_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = keepAlive_result()
    try:
      self._handler.keepAlive(args.Session)
    except AirException, ex:
      result.ex = ex
    oprot.writeMessageBegin("keepAlive", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_inputPasswd(self, seqid, iprot, oprot):
    args = inputPasswd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = inputPasswd_result()
    try:
      self._handler.inputPasswd(args.Session, args.iLockType, args.strPassword)
    except AirException, ex:
      result.ex = ex
    oprot.writeMessageBegin("inputPasswd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ResetPasswd(self, seqid, iprot, oprot):
    args = ResetPasswd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ResetPasswd_result()
    try:
      self._handler.ResetPasswd(args.strDevCode, args.iLockType, args.strPassword)
    except AirException, ex:
      result.ex = ex
    oprot.writeMessageBegin("ResetPasswd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_modifyPasswd(self, seqid, iprot, oprot):
    args = modifyPasswd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = modifyPasswd_result()
    try:
      self._handler.modifyPasswd(args.strOldPasswd, args.strNewPasswd, args.iLockType)
    except AirException, ex:
      result.ex = ex
    oprot.writeMessageBegin("modifyPasswd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class connectServer_args:
  """
  Attributes:
   - strDevCode: 设备编码(加密)
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'strDevCode', None, None, ), # 1
  )

  def __init__(self, strDevCode=None,):
    self.strDevCode = strDevCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.strDevCode = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('connectServer_args')
    if self.strDevCode is not None:
      oprot.writeFieldBegin('strDevCode', TType.STRING, 1)
      oprot.writeString(self.strDevCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class connectServer_result:
  """
  Attributes:
   - success
   - ex: 抛出异常
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (AirException, AirException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = AirException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('connectServer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disconnectServer_args:
  """
  Attributes:
   - Session: 用户Session
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Session', None, None, ), # 1
  )

  def __init__(self, Session=None,):
    self.Session = Session

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Session = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disconnectServer_args')
    if self.Session is not None:
      oprot.writeFieldBegin('Session', TType.STRING, 1)
      oprot.writeString(self.Session)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disconnectServer_result:
  """
  Attributes:
   - ex: 抛出异常
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (AirException, AirException.thrift_spec), None, ), # 1
  )

  def __init__(self, ex=None,):
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = AirException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disconnectServer_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class keepAlive_args:
  """
  Attributes:
   - Session: 用户Session
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Session', None, None, ), # 1
  )

  def __init__(self, Session=None,):
    self.Session = Session

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Session = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('keepAlive_args')
    if self.Session is not None:
      oprot.writeFieldBegin('Session', TType.STRING, 1)
      oprot.writeString(self.Session)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class keepAlive_result:
  """
  Attributes:
   - ex: 抛出异常
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (AirException, AirException.thrift_spec), None, ), # 1
  )

  def __init__(self, ex=None,):
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = AirException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('keepAlive_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inputPasswd_args:
  """
  Attributes:
   - Session: 用户Session
   - iLockType: 锁类型
   - strPassword: 密码
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Session', None, None, ), # 1
    (2, TType.I32, 'iLockType', None, None, ), # 2
    (3, TType.STRING, 'strPassword', None, None, ), # 3
  )

  def __init__(self, Session=None, iLockType=None, strPassword=None,):
    self.Session = Session
    self.iLockType = iLockType
    self.strPassword = strPassword

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Session = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.iLockType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.strPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inputPasswd_args')
    if self.Session is not None:
      oprot.writeFieldBegin('Session', TType.STRING, 1)
      oprot.writeString(self.Session)
      oprot.writeFieldEnd()
    if self.iLockType is not None:
      oprot.writeFieldBegin('iLockType', TType.I32, 2)
      oprot.writeI32(self.iLockType)
      oprot.writeFieldEnd()
    if self.strPassword is not None:
      oprot.writeFieldBegin('strPassword', TType.STRING, 3)
      oprot.writeString(self.strPassword)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inputPasswd_result:
  """
  Attributes:
   - ex: 抛出异常
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (AirException, AirException.thrift_spec), None, ), # 1
  )

  def __init__(self, ex=None,):
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = AirException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inputPasswd_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResetPasswd_args:
  """
  Attributes:
   - strDevCode: 加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口
   - iLockType: 锁类型
   - strPassword: 密码
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'strDevCode', None, None, ), # 1
    (2, TType.I32, 'iLockType', None, None, ), # 2
    (3, TType.STRING, 'strPassword', None, None, ), # 3
  )

  def __init__(self, strDevCode=None, iLockType=None, strPassword=None,):
    self.strDevCode = strDevCode
    self.iLockType = iLockType
    self.strPassword = strPassword

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.strDevCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.iLockType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.strPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResetPasswd_args')
    if self.strDevCode is not None:
      oprot.writeFieldBegin('strDevCode', TType.STRING, 1)
      oprot.writeString(self.strDevCode)
      oprot.writeFieldEnd()
    if self.iLockType is not None:
      oprot.writeFieldBegin('iLockType', TType.I32, 2)
      oprot.writeI32(self.iLockType)
      oprot.writeFieldEnd()
    if self.strPassword is not None:
      oprot.writeFieldBegin('strPassword', TType.STRING, 3)
      oprot.writeString(self.strPassword)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResetPasswd_result:
  """
  Attributes:
   - ex: 抛出异常
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (AirException, AirException.thrift_spec), None, ), # 1
  )

  def __init__(self, ex=None,):
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = AirException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResetPasswd_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modifyPasswd_args:
  """
  Attributes:
   - strOldPasswd
   - strNewPasswd
   - iLockType: 锁类型
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'strOldPasswd', None, None, ), # 1
    (2, TType.STRING, 'strNewPasswd', None, None, ), # 2
    (3, TType.I32, 'iLockType', None, None, ), # 3
  )

  def __init__(self, strOldPasswd=None, strNewPasswd=None, iLockType=None,):
    self.strOldPasswd = strOldPasswd
    self.strNewPasswd = strNewPasswd
    self.iLockType = iLockType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.strOldPasswd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.strNewPasswd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.iLockType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modifyPasswd_args')
    if self.strOldPasswd is not None:
      oprot.writeFieldBegin('strOldPasswd', TType.STRING, 1)
      oprot.writeString(self.strOldPasswd)
      oprot.writeFieldEnd()
    if self.strNewPasswd is not None:
      oprot.writeFieldBegin('strNewPasswd', TType.STRING, 2)
      oprot.writeString(self.strNewPasswd)
      oprot.writeFieldEnd()
    if self.iLockType is not None:
      oprot.writeFieldBegin('iLockType', TType.I32, 3)
      oprot.writeI32(self.iLockType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modifyPasswd_result:
  """
  Attributes:
   - ex: 抛出异常
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ex', (AirException, AirException.thrift_spec), None, ), # 1
  )

  def __init__(self, ex=None,):
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ex = AirException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modifyPasswd_result')
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
