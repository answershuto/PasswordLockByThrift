#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class AirExceptionType:
  """
  错误类型
  """
  PASSWD_EXCEPTION = 0
  USER_DIONLINE = 1

  _VALUES_TO_NAMES = {
    0: "PASSWD_EXCEPTION",
    1: "USER_DIONLINE",
  }

  _NAMES_TO_VALUES = {
    "PASSWD_EXCEPTION": 0,
    "USER_DIONLINE": 1,
  }


class AirException(TException):
  """
  调用错误

  Attributes:
   - type: 错误类型
   - errorCode: 错误码
   - errorMessage: 错误消息
   - debugMessage: 调试信息
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I64, 'errorCode', None, None, ), # 2
    (3, TType.STRING, 'errorMessage', None, None, ), # 3
    (4, TType.STRING, 'debugMessage', None, None, ), # 4
  )

  def __init__(self, type=None, errorCode=None, errorMessage=None, debugMessage=None,):
    self.type = type
    self.errorCode = errorCode
    self.errorMessage = errorMessage
    self.debugMessage = debugMessage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.errorCode = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.errorMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.debugMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AirException')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.errorCode is not None:
      oprot.writeFieldBegin('errorCode', TType.I64, 2)
      oprot.writeI64(self.errorCode)
      oprot.writeFieldEnd()
    if self.errorMessage is not None:
      oprot.writeFieldBegin('errorMessage', TType.STRING, 3)
      oprot.writeString(self.errorMessage)
      oprot.writeFieldEnd()
    if self.debugMessage is not None:
      oprot.writeFieldBegin('debugMessage', TType.STRING, 4)
      oprot.writeString(self.debugMessage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.errorCode is None:
      raise TProtocol.TProtocolException(message='Required field errorCode is unset!')
    if self.errorMessage is None:
      raise TProtocol.TProtocolException(message='Required field errorMessage is unset!')
    if self.debugMessage is None:
      raise TProtocol.TProtocolException(message='Required field debugMessage is unset!')
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
