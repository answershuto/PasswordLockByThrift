/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class passwordLock {

  public interface Iface {

    /**
     * 连接服务器,返回Session
     * 
     * @param strDevCode 设备编码(加密)
     */
    public String connectServer(String strDevCode) throws AirException, org.apache.thrift.TException;

    /**
     * 与服务器断开连接
     * 
     * @param Session 用户Session
     */
    public void disconnectServer(String Session) throws AirException, org.apache.thrift.TException;

    /**
     * 保活
     * 
     * @param Session 用户Session
     */
    public void keepAlive(String Session) throws AirException, org.apache.thrift.TException;

    /**
     * 输入密码
     * 
     * @param Session 用户Session
     * 
     * @param iLockType 锁类型
     * 
     * @param strPassword 密码
     */
    public void inputPasswd(String Session, int iLockType, String strPassword) throws AirException, org.apache.thrift.TException;

    /**
     * 重置密码
     * 
     * @param strDevCode 加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口
     * 
     * @param iLockType 锁类型
     * 
     * @param strPassword 密码
     */
    public void ResetPasswd(String strDevCode, int iLockType, String strPassword) throws AirException, org.apache.thrift.TException;

    /**
     * 修改密码
     * 
     * @param strOldPasswd
     * @param strNewPasswd
     * @param iLockType 锁类型
     */
    public void modifyPasswd(String strOldPasswd, String strNewPasswd, int iLockType) throws AirException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void connectServer(String strDevCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void disconnectServer(String Session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void keepAlive(String Session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void inputPasswd(String Session, int iLockType, String strPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ResetPasswd(String strDevCode, int iLockType, String strPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modifyPasswd(String strOldPasswd, String strNewPasswd, int iLockType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String connectServer(String strDevCode) throws AirException, org.apache.thrift.TException
    {
      send_connectServer(strDevCode);
      return recv_connectServer();
    }

    public void send_connectServer(String strDevCode) throws org.apache.thrift.TException
    {
      connectServer_args args = new connectServer_args();
      args.setStrDevCode(strDevCode);
      sendBase("connectServer", args);
    }

    public String recv_connectServer() throws AirException, org.apache.thrift.TException
    {
      connectServer_result result = new connectServer_result();
      receiveBase(result, "connectServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connectServer failed: unknown result");
    }

    public void disconnectServer(String Session) throws AirException, org.apache.thrift.TException
    {
      send_disconnectServer(Session);
      recv_disconnectServer();
    }

    public void send_disconnectServer(String Session) throws org.apache.thrift.TException
    {
      disconnectServer_args args = new disconnectServer_args();
      args.setSession(Session);
      sendBase("disconnectServer", args);
    }

    public void recv_disconnectServer() throws AirException, org.apache.thrift.TException
    {
      disconnectServer_result result = new disconnectServer_result();
      receiveBase(result, "disconnectServer");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void keepAlive(String Session) throws AirException, org.apache.thrift.TException
    {
      send_keepAlive(Session);
      recv_keepAlive();
    }

    public void send_keepAlive(String Session) throws org.apache.thrift.TException
    {
      keepAlive_args args = new keepAlive_args();
      args.setSession(Session);
      sendBase("keepAlive", args);
    }

    public void recv_keepAlive() throws AirException, org.apache.thrift.TException
    {
      keepAlive_result result = new keepAlive_result();
      receiveBase(result, "keepAlive");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void inputPasswd(String Session, int iLockType, String strPassword) throws AirException, org.apache.thrift.TException
    {
      send_inputPasswd(Session, iLockType, strPassword);
      recv_inputPasswd();
    }

    public void send_inputPasswd(String Session, int iLockType, String strPassword) throws org.apache.thrift.TException
    {
      inputPasswd_args args = new inputPasswd_args();
      args.setSession(Session);
      args.setILockType(iLockType);
      args.setStrPassword(strPassword);
      sendBase("inputPasswd", args);
    }

    public void recv_inputPasswd() throws AirException, org.apache.thrift.TException
    {
      inputPasswd_result result = new inputPasswd_result();
      receiveBase(result, "inputPasswd");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void ResetPasswd(String strDevCode, int iLockType, String strPassword) throws AirException, org.apache.thrift.TException
    {
      send_ResetPasswd(strDevCode, iLockType, strPassword);
      recv_ResetPasswd();
    }

    public void send_ResetPasswd(String strDevCode, int iLockType, String strPassword) throws org.apache.thrift.TException
    {
      ResetPasswd_args args = new ResetPasswd_args();
      args.setStrDevCode(strDevCode);
      args.setILockType(iLockType);
      args.setStrPassword(strPassword);
      sendBase("ResetPasswd", args);
    }

    public void recv_ResetPasswd() throws AirException, org.apache.thrift.TException
    {
      ResetPasswd_result result = new ResetPasswd_result();
      receiveBase(result, "ResetPasswd");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void modifyPasswd(String strOldPasswd, String strNewPasswd, int iLockType) throws AirException, org.apache.thrift.TException
    {
      send_modifyPasswd(strOldPasswd, strNewPasswd, iLockType);
      recv_modifyPasswd();
    }

    public void send_modifyPasswd(String strOldPasswd, String strNewPasswd, int iLockType) throws org.apache.thrift.TException
    {
      modifyPasswd_args args = new modifyPasswd_args();
      args.setStrOldPasswd(strOldPasswd);
      args.setStrNewPasswd(strNewPasswd);
      args.setILockType(iLockType);
      sendBase("modifyPasswd", args);
    }

    public void recv_modifyPasswd() throws AirException, org.apache.thrift.TException
    {
      modifyPasswd_result result = new modifyPasswd_result();
      receiveBase(result, "modifyPasswd");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void connectServer(String strDevCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connectServer_call method_call = new connectServer_call(strDevCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connectServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String strDevCode;
      public connectServer_call(String strDevCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strDevCode = strDevCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connectServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connectServer_args args = new connectServer_args();
        args.setStrDevCode(strDevCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws AirException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connectServer();
      }
    }

    public void disconnectServer(String Session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disconnectServer_call method_call = new disconnectServer_call(Session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disconnectServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String Session;
      public disconnectServer_call(String Session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Session = Session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disconnectServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disconnectServer_args args = new disconnectServer_args();
        args.setSession(Session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AirException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_disconnectServer();
      }
    }

    public void keepAlive(String Session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      keepAlive_call method_call = new keepAlive_call(Session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class keepAlive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String Session;
      public keepAlive_call(String Session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Session = Session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("keepAlive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        keepAlive_args args = new keepAlive_args();
        args.setSession(Session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AirException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_keepAlive();
      }
    }

    public void inputPasswd(String Session, int iLockType, String strPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      inputPasswd_call method_call = new inputPasswd_call(Session, iLockType, strPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class inputPasswd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String Session;
      private int iLockType;
      private String strPassword;
      public inputPasswd_call(String Session, int iLockType, String strPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Session = Session;
        this.iLockType = iLockType;
        this.strPassword = strPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inputPasswd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        inputPasswd_args args = new inputPasswd_args();
        args.setSession(Session);
        args.setILockType(iLockType);
        args.setStrPassword(strPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AirException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_inputPasswd();
      }
    }

    public void ResetPasswd(String strDevCode, int iLockType, String strPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResetPasswd_call method_call = new ResetPasswd_call(strDevCode, iLockType, strPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResetPasswd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String strDevCode;
      private int iLockType;
      private String strPassword;
      public ResetPasswd_call(String strDevCode, int iLockType, String strPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strDevCode = strDevCode;
        this.iLockType = iLockType;
        this.strPassword = strPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResetPasswd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ResetPasswd_args args = new ResetPasswd_args();
        args.setStrDevCode(strDevCode);
        args.setILockType(iLockType);
        args.setStrPassword(strPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AirException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ResetPasswd();
      }
    }

    public void modifyPasswd(String strOldPasswd, String strNewPasswd, int iLockType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyPasswd_call method_call = new modifyPasswd_call(strOldPasswd, strNewPasswd, iLockType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyPasswd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String strOldPasswd;
      private String strNewPasswd;
      private int iLockType;
      public modifyPasswd_call(String strOldPasswd, String strNewPasswd, int iLockType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strOldPasswd = strOldPasswd;
        this.strNewPasswd = strNewPasswd;
        this.iLockType = iLockType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyPasswd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyPasswd_args args = new modifyPasswd_args();
        args.setStrOldPasswd(strOldPasswd);
        args.setStrNewPasswd(strNewPasswd);
        args.setILockType(iLockType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AirException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_modifyPasswd();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("connectServer", new connectServer());
      processMap.put("disconnectServer", new disconnectServer());
      processMap.put("keepAlive", new keepAlive());
      processMap.put("inputPasswd", new inputPasswd());
      processMap.put("ResetPasswd", new ResetPasswd());
      processMap.put("modifyPasswd", new modifyPasswd());
      return processMap;
    }

    public static class connectServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connectServer_args> {
      public connectServer() {
        super("connectServer");
      }

      public connectServer_args getEmptyArgsInstance() {
        return new connectServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public connectServer_result getResult(I iface, connectServer_args args) throws org.apache.thrift.TException {
        connectServer_result result = new connectServer_result();
        try {
          result.success = iface.connectServer(args.strDevCode);
        } catch (AirException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class disconnectServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disconnectServer_args> {
      public disconnectServer() {
        super("disconnectServer");
      }

      public disconnectServer_args getEmptyArgsInstance() {
        return new disconnectServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disconnectServer_result getResult(I iface, disconnectServer_args args) throws org.apache.thrift.TException {
        disconnectServer_result result = new disconnectServer_result();
        try {
          iface.disconnectServer(args.Session);
        } catch (AirException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class keepAlive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, keepAlive_args> {
      public keepAlive() {
        super("keepAlive");
      }

      public keepAlive_args getEmptyArgsInstance() {
        return new keepAlive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public keepAlive_result getResult(I iface, keepAlive_args args) throws org.apache.thrift.TException {
        keepAlive_result result = new keepAlive_result();
        try {
          iface.keepAlive(args.Session);
        } catch (AirException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class inputPasswd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inputPasswd_args> {
      public inputPasswd() {
        super("inputPasswd");
      }

      public inputPasswd_args getEmptyArgsInstance() {
        return new inputPasswd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public inputPasswd_result getResult(I iface, inputPasswd_args args) throws org.apache.thrift.TException {
        inputPasswd_result result = new inputPasswd_result();
        try {
          iface.inputPasswd(args.Session, args.iLockType, args.strPassword);
        } catch (AirException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class ResetPasswd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResetPasswd_args> {
      public ResetPasswd() {
        super("ResetPasswd");
      }

      public ResetPasswd_args getEmptyArgsInstance() {
        return new ResetPasswd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ResetPasswd_result getResult(I iface, ResetPasswd_args args) throws org.apache.thrift.TException {
        ResetPasswd_result result = new ResetPasswd_result();
        try {
          iface.ResetPasswd(args.strDevCode, args.iLockType, args.strPassword);
        } catch (AirException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class modifyPasswd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyPasswd_args> {
      public modifyPasswd() {
        super("modifyPasswd");
      }

      public modifyPasswd_args getEmptyArgsInstance() {
        return new modifyPasswd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifyPasswd_result getResult(I iface, modifyPasswd_args args) throws org.apache.thrift.TException {
        modifyPasswd_result result = new modifyPasswd_result();
        try {
          iface.modifyPasswd(args.strOldPasswd, args.strNewPasswd, args.iLockType);
        } catch (AirException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("connectServer", new connectServer());
      processMap.put("disconnectServer", new disconnectServer());
      processMap.put("keepAlive", new keepAlive());
      processMap.put("inputPasswd", new inputPasswd());
      processMap.put("ResetPasswd", new ResetPasswd());
      processMap.put("modifyPasswd", new modifyPasswd());
      return processMap;
    }

    public static class connectServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connectServer_args, String> {
      public connectServer() {
        super("connectServer");
      }

      public connectServer_args getEmptyArgsInstance() {
        return new connectServer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            connectServer_result result = new connectServer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            connectServer_result result = new connectServer_result();
            if (e instanceof AirException) {
                        result.ex = (AirException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, connectServer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.connectServer(args.strDevCode,resultHandler);
      }
    }

    public static class disconnectServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disconnectServer_args, Void> {
      public disconnectServer() {
        super("disconnectServer");
      }

      public disconnectServer_args getEmptyArgsInstance() {
        return new disconnectServer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            disconnectServer_result result = new disconnectServer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            disconnectServer_result result = new disconnectServer_result();
            if (e instanceof AirException) {
                        result.ex = (AirException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disconnectServer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.disconnectServer(args.Session,resultHandler);
      }
    }

    public static class keepAlive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, keepAlive_args, Void> {
      public keepAlive() {
        super("keepAlive");
      }

      public keepAlive_args getEmptyArgsInstance() {
        return new keepAlive_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            keepAlive_result result = new keepAlive_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            keepAlive_result result = new keepAlive_result();
            if (e instanceof AirException) {
                        result.ex = (AirException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, keepAlive_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.keepAlive(args.Session,resultHandler);
      }
    }

    public static class inputPasswd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, inputPasswd_args, Void> {
      public inputPasswd() {
        super("inputPasswd");
      }

      public inputPasswd_args getEmptyArgsInstance() {
        return new inputPasswd_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            inputPasswd_result result = new inputPasswd_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            inputPasswd_result result = new inputPasswd_result();
            if (e instanceof AirException) {
                        result.ex = (AirException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, inputPasswd_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.inputPasswd(args.Session, args.iLockType, args.strPassword,resultHandler);
      }
    }

    public static class ResetPasswd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResetPasswd_args, Void> {
      public ResetPasswd() {
        super("ResetPasswd");
      }

      public ResetPasswd_args getEmptyArgsInstance() {
        return new ResetPasswd_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ResetPasswd_result result = new ResetPasswd_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ResetPasswd_result result = new ResetPasswd_result();
            if (e instanceof AirException) {
                        result.ex = (AirException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ResetPasswd_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ResetPasswd(args.strDevCode, args.iLockType, args.strPassword,resultHandler);
      }
    }

    public static class modifyPasswd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyPasswd_args, Void> {
      public modifyPasswd() {
        super("modifyPasswd");
      }

      public modifyPasswd_args getEmptyArgsInstance() {
        return new modifyPasswd_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            modifyPasswd_result result = new modifyPasswd_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modifyPasswd_result result = new modifyPasswd_result();
            if (e instanceof AirException) {
                        result.ex = (AirException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyPasswd_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.modifyPasswd(args.strOldPasswd, args.strNewPasswd, args.iLockType,resultHandler);
      }
    }

  }

  public static class connectServer_args implements org.apache.thrift.TBase<connectServer_args, connectServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<connectServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connectServer_args");

    private static final org.apache.thrift.protocol.TField STR_DEV_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("strDevCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connectServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connectServer_argsTupleSchemeFactory());
    }

    /**
     * 设备编码(加密)
     */
    public String strDevCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 设备编码(加密)
       */
      STR_DEV_CODE((short)1, "strDevCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR_DEV_CODE
            return STR_DEV_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR_DEV_CODE, new org.apache.thrift.meta_data.FieldMetaData("strDevCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connectServer_args.class, metaDataMap);
    }

    public connectServer_args() {
    }

    public connectServer_args(
      String strDevCode)
    {
      this();
      this.strDevCode = strDevCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connectServer_args(connectServer_args other) {
      if (other.isSetStrDevCode()) {
        this.strDevCode = other.strDevCode;
      }
    }

    public connectServer_args deepCopy() {
      return new connectServer_args(this);
    }

    @Override
    public void clear() {
      this.strDevCode = null;
    }

    /**
     * 设备编码(加密)
     */
    public String getStrDevCode() {
      return this.strDevCode;
    }

    /**
     * 设备编码(加密)
     */
    public connectServer_args setStrDevCode(String strDevCode) {
      this.strDevCode = strDevCode;
      return this;
    }

    public void unsetStrDevCode() {
      this.strDevCode = null;
    }

    /** Returns true if field strDevCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStrDevCode() {
      return this.strDevCode != null;
    }

    public void setStrDevCodeIsSet(boolean value) {
      if (!value) {
        this.strDevCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STR_DEV_CODE:
        if (value == null) {
          unsetStrDevCode();
        } else {
          setStrDevCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STR_DEV_CODE:
        return getStrDevCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STR_DEV_CODE:
        return isSetStrDevCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connectServer_args)
        return this.equals((connectServer_args)that);
      return false;
    }

    public boolean equals(connectServer_args that) {
      if (that == null)
        return false;

      boolean this_present_strDevCode = true && this.isSetStrDevCode();
      boolean that_present_strDevCode = true && that.isSetStrDevCode();
      if (this_present_strDevCode || that_present_strDevCode) {
        if (!(this_present_strDevCode && that_present_strDevCode))
          return false;
        if (!this.strDevCode.equals(that.strDevCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connectServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrDevCode()).compareTo(other.isSetStrDevCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrDevCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strDevCode, other.strDevCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connectServer_args(");
      boolean first = true;

      sb.append("strDevCode:");
      if (this.strDevCode == null) {
        sb.append("null");
      } else {
        sb.append(this.strDevCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connectServer_argsStandardSchemeFactory implements SchemeFactory {
      public connectServer_argsStandardScheme getScheme() {
        return new connectServer_argsStandardScheme();
      }
    }

    private static class connectServer_argsStandardScheme extends StandardScheme<connectServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connectServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STR_DEV_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strDevCode = iprot.readString();
                struct.setStrDevCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connectServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strDevCode != null) {
          oprot.writeFieldBegin(STR_DEV_CODE_FIELD_DESC);
          oprot.writeString(struct.strDevCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connectServer_argsTupleSchemeFactory implements SchemeFactory {
      public connectServer_argsTupleScheme getScheme() {
        return new connectServer_argsTupleScheme();
      }
    }

    private static class connectServer_argsTupleScheme extends TupleScheme<connectServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connectServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrDevCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrDevCode()) {
          oprot.writeString(struct.strDevCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connectServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strDevCode = iprot.readString();
          struct.setStrDevCodeIsSet(true);
        }
      }
    }

  }

  public static class connectServer_result implements org.apache.thrift.TBase<connectServer_result, connectServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<connectServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connectServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new connectServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new connectServer_resultTupleSchemeFactory());
    }

    public String success; // required
    /**
     * 抛出异常
     */
    public AirException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      /**
       * 抛出异常
       */
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connectServer_result.class, metaDataMap);
    }

    public connectServer_result() {
    }

    public connectServer_result(
      String success,
      AirException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connectServer_result(connectServer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new AirException(other.ex);
      }
    }

    public connectServer_result deepCopy() {
      return new connectServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public connectServer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /**
     * 抛出异常
     */
    public AirException getEx() {
      return this.ex;
    }

    /**
     * 抛出异常
     */
    public connectServer_result setEx(AirException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((AirException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof connectServer_result)
        return this.equals((connectServer_result)that);
      return false;
    }

    public boolean equals(connectServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(connectServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("connectServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connectServer_resultStandardSchemeFactory implements SchemeFactory {
      public connectServer_resultStandardScheme getScheme() {
        return new connectServer_resultStandardScheme();
      }
    }

    private static class connectServer_resultStandardScheme extends StandardScheme<connectServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, connectServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new AirException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, connectServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connectServer_resultTupleSchemeFactory implements SchemeFactory {
      public connectServer_resultTupleScheme getScheme() {
        return new connectServer_resultTupleScheme();
      }
    }

    private static class connectServer_resultTupleScheme extends TupleScheme<connectServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connectServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connectServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new AirException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class disconnectServer_args implements org.apache.thrift.TBase<disconnectServer_args, disconnectServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<disconnectServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnectServer_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("Session", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disconnectServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disconnectServer_argsTupleSchemeFactory());
    }

    /**
     * 用户Session
     */
    public String Session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 用户Session
       */
      SESSION((short)1, "Session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("Session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnectServer_args.class, metaDataMap);
    }

    public disconnectServer_args() {
    }

    public disconnectServer_args(
      String Session)
    {
      this();
      this.Session = Session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnectServer_args(disconnectServer_args other) {
      if (other.isSetSession()) {
        this.Session = other.Session;
      }
    }

    public disconnectServer_args deepCopy() {
      return new disconnectServer_args(this);
    }

    @Override
    public void clear() {
      this.Session = null;
    }

    /**
     * 用户Session
     */
    public String getSession() {
      return this.Session;
    }

    /**
     * 用户Session
     */
    public disconnectServer_args setSession(String Session) {
      this.Session = Session;
      return this;
    }

    public void unsetSession() {
      this.Session = null;
    }

    /** Returns true if field Session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.Session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.Session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disconnectServer_args)
        return this.equals((disconnectServer_args)that);
      return false;
    }

    public boolean equals(disconnectServer_args that) {
      if (that == null)
        return false;

      boolean this_present_Session = true && this.isSetSession();
      boolean that_present_Session = true && that.isSetSession();
      if (this_present_Session || that_present_Session) {
        if (!(this_present_Session && that_present_Session))
          return false;
        if (!this.Session.equals(that.Session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(disconnectServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Session, other.Session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disconnectServer_args(");
      boolean first = true;

      sb.append("Session:");
      if (this.Session == null) {
        sb.append("null");
      } else {
        sb.append(this.Session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnectServer_argsStandardSchemeFactory implements SchemeFactory {
      public disconnectServer_argsStandardScheme getScheme() {
        return new disconnectServer_argsStandardScheme();
      }
    }

    private static class disconnectServer_argsStandardScheme extends StandardScheme<disconnectServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnectServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnectServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.Session);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnectServer_argsTupleSchemeFactory implements SchemeFactory {
      public disconnectServer_argsTupleScheme getScheme() {
        return new disconnectServer_argsTupleScheme();
      }
    }

    private static class disconnectServer_argsTupleScheme extends TupleScheme<disconnectServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnectServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSession()) {
          oprot.writeString(struct.Session);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnectServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.Session = iprot.readString();
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class disconnectServer_result implements org.apache.thrift.TBase<disconnectServer_result, disconnectServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<disconnectServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnectServer_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disconnectServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disconnectServer_resultTupleSchemeFactory());
    }

    /**
     * 抛出异常
     */
    public AirException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 抛出异常
       */
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnectServer_result.class, metaDataMap);
    }

    public disconnectServer_result() {
    }

    public disconnectServer_result(
      AirException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnectServer_result(disconnectServer_result other) {
      if (other.isSetEx()) {
        this.ex = new AirException(other.ex);
      }
    }

    public disconnectServer_result deepCopy() {
      return new disconnectServer_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    /**
     * 抛出异常
     */
    public AirException getEx() {
      return this.ex;
    }

    /**
     * 抛出异常
     */
    public disconnectServer_result setEx(AirException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((AirException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disconnectServer_result)
        return this.equals((disconnectServer_result)that);
      return false;
    }

    public boolean equals(disconnectServer_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(disconnectServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disconnectServer_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnectServer_resultStandardSchemeFactory implements SchemeFactory {
      public disconnectServer_resultStandardScheme getScheme() {
        return new disconnectServer_resultStandardScheme();
      }
    }

    private static class disconnectServer_resultStandardScheme extends StandardScheme<disconnectServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnectServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new AirException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnectServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnectServer_resultTupleSchemeFactory implements SchemeFactory {
      public disconnectServer_resultTupleScheme getScheme() {
        return new disconnectServer_resultTupleScheme();
      }
    }

    private static class disconnectServer_resultTupleScheme extends TupleScheme<disconnectServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnectServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnectServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new AirException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class keepAlive_args implements org.apache.thrift.TBase<keepAlive_args, keepAlive_args._Fields>, java.io.Serializable, Cloneable, Comparable<keepAlive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("keepAlive_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("Session", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new keepAlive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new keepAlive_argsTupleSchemeFactory());
    }

    /**
     * 用户Session
     */
    public String Session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 用户Session
       */
      SESSION((short)1, "Session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("Session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(keepAlive_args.class, metaDataMap);
    }

    public keepAlive_args() {
    }

    public keepAlive_args(
      String Session)
    {
      this();
      this.Session = Session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public keepAlive_args(keepAlive_args other) {
      if (other.isSetSession()) {
        this.Session = other.Session;
      }
    }

    public keepAlive_args deepCopy() {
      return new keepAlive_args(this);
    }

    @Override
    public void clear() {
      this.Session = null;
    }

    /**
     * 用户Session
     */
    public String getSession() {
      return this.Session;
    }

    /**
     * 用户Session
     */
    public keepAlive_args setSession(String Session) {
      this.Session = Session;
      return this;
    }

    public void unsetSession() {
      this.Session = null;
    }

    /** Returns true if field Session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.Session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.Session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof keepAlive_args)
        return this.equals((keepAlive_args)that);
      return false;
    }

    public boolean equals(keepAlive_args that) {
      if (that == null)
        return false;

      boolean this_present_Session = true && this.isSetSession();
      boolean that_present_Session = true && that.isSetSession();
      if (this_present_Session || that_present_Session) {
        if (!(this_present_Session && that_present_Session))
          return false;
        if (!this.Session.equals(that.Session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(keepAlive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Session, other.Session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("keepAlive_args(");
      boolean first = true;

      sb.append("Session:");
      if (this.Session == null) {
        sb.append("null");
      } else {
        sb.append(this.Session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class keepAlive_argsStandardSchemeFactory implements SchemeFactory {
      public keepAlive_argsStandardScheme getScheme() {
        return new keepAlive_argsStandardScheme();
      }
    }

    private static class keepAlive_argsStandardScheme extends StandardScheme<keepAlive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, keepAlive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, keepAlive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.Session);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class keepAlive_argsTupleSchemeFactory implements SchemeFactory {
      public keepAlive_argsTupleScheme getScheme() {
        return new keepAlive_argsTupleScheme();
      }
    }

    private static class keepAlive_argsTupleScheme extends TupleScheme<keepAlive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, keepAlive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSession()) {
          oprot.writeString(struct.Session);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, keepAlive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.Session = iprot.readString();
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class keepAlive_result implements org.apache.thrift.TBase<keepAlive_result, keepAlive_result._Fields>, java.io.Serializable, Cloneable, Comparable<keepAlive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("keepAlive_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new keepAlive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new keepAlive_resultTupleSchemeFactory());
    }

    /**
     * 抛出异常
     */
    public AirException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 抛出异常
       */
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(keepAlive_result.class, metaDataMap);
    }

    public keepAlive_result() {
    }

    public keepAlive_result(
      AirException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public keepAlive_result(keepAlive_result other) {
      if (other.isSetEx()) {
        this.ex = new AirException(other.ex);
      }
    }

    public keepAlive_result deepCopy() {
      return new keepAlive_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    /**
     * 抛出异常
     */
    public AirException getEx() {
      return this.ex;
    }

    /**
     * 抛出异常
     */
    public keepAlive_result setEx(AirException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((AirException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof keepAlive_result)
        return this.equals((keepAlive_result)that);
      return false;
    }

    public boolean equals(keepAlive_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(keepAlive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("keepAlive_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class keepAlive_resultStandardSchemeFactory implements SchemeFactory {
      public keepAlive_resultStandardScheme getScheme() {
        return new keepAlive_resultStandardScheme();
      }
    }

    private static class keepAlive_resultStandardScheme extends StandardScheme<keepAlive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, keepAlive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new AirException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, keepAlive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class keepAlive_resultTupleSchemeFactory implements SchemeFactory {
      public keepAlive_resultTupleScheme getScheme() {
        return new keepAlive_resultTupleScheme();
      }
    }

    private static class keepAlive_resultTupleScheme extends TupleScheme<keepAlive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, keepAlive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, keepAlive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new AirException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class inputPasswd_args implements org.apache.thrift.TBase<inputPasswd_args, inputPasswd_args._Fields>, java.io.Serializable, Cloneable, Comparable<inputPasswd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inputPasswd_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("Session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField I_LOCK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("iLockType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STR_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("strPassword", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inputPasswd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inputPasswd_argsTupleSchemeFactory());
    }

    /**
     * 用户Session
     */
    public String Session; // required
    /**
     * 锁类型
     */
    public int iLockType; // required
    /**
     * 密码
     */
    public String strPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 用户Session
       */
      SESSION((short)1, "Session"),
      /**
       * 锁类型
       */
      I_LOCK_TYPE((short)2, "iLockType"),
      /**
       * 密码
       */
      STR_PASSWORD((short)3, "strPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // I_LOCK_TYPE
            return I_LOCK_TYPE;
          case 3: // STR_PASSWORD
            return STR_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ILOCKTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("Session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.I_LOCK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("iLockType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STR_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("strPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inputPasswd_args.class, metaDataMap);
    }

    public inputPasswd_args() {
    }

    public inputPasswd_args(
      String Session,
      int iLockType,
      String strPassword)
    {
      this();
      this.Session = Session;
      this.iLockType = iLockType;
      setILockTypeIsSet(true);
      this.strPassword = strPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inputPasswd_args(inputPasswd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSession()) {
        this.Session = other.Session;
      }
      this.iLockType = other.iLockType;
      if (other.isSetStrPassword()) {
        this.strPassword = other.strPassword;
      }
    }

    public inputPasswd_args deepCopy() {
      return new inputPasswd_args(this);
    }

    @Override
    public void clear() {
      this.Session = null;
      setILockTypeIsSet(false);
      this.iLockType = 0;
      this.strPassword = null;
    }

    /**
     * 用户Session
     */
    public String getSession() {
      return this.Session;
    }

    /**
     * 用户Session
     */
    public inputPasswd_args setSession(String Session) {
      this.Session = Session;
      return this;
    }

    public void unsetSession() {
      this.Session = null;
    }

    /** Returns true if field Session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.Session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.Session = null;
      }
    }

    /**
     * 锁类型
     */
    public int getILockType() {
      return this.iLockType;
    }

    /**
     * 锁类型
     */
    public inputPasswd_args setILockType(int iLockType) {
      this.iLockType = iLockType;
      setILockTypeIsSet(true);
      return this;
    }

    public void unsetILockType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ILOCKTYPE_ISSET_ID);
    }

    /** Returns true if field iLockType is set (has been assigned a value) and false otherwise */
    public boolean isSetILockType() {
      return EncodingUtils.testBit(__isset_bitfield, __ILOCKTYPE_ISSET_ID);
    }

    public void setILockTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ILOCKTYPE_ISSET_ID, value);
    }

    /**
     * 密码
     */
    public String getStrPassword() {
      return this.strPassword;
    }

    /**
     * 密码
     */
    public inputPasswd_args setStrPassword(String strPassword) {
      this.strPassword = strPassword;
      return this;
    }

    public void unsetStrPassword() {
      this.strPassword = null;
    }

    /** Returns true if field strPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetStrPassword() {
      return this.strPassword != null;
    }

    public void setStrPasswordIsSet(boolean value) {
      if (!value) {
        this.strPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((String)value);
        }
        break;

      case I_LOCK_TYPE:
        if (value == null) {
          unsetILockType();
        } else {
          setILockType((Integer)value);
        }
        break;

      case STR_PASSWORD:
        if (value == null) {
          unsetStrPassword();
        } else {
          setStrPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case I_LOCK_TYPE:
        return Integer.valueOf(getILockType());

      case STR_PASSWORD:
        return getStrPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case I_LOCK_TYPE:
        return isSetILockType();
      case STR_PASSWORD:
        return isSetStrPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inputPasswd_args)
        return this.equals((inputPasswd_args)that);
      return false;
    }

    public boolean equals(inputPasswd_args that) {
      if (that == null)
        return false;

      boolean this_present_Session = true && this.isSetSession();
      boolean that_present_Session = true && that.isSetSession();
      if (this_present_Session || that_present_Session) {
        if (!(this_present_Session && that_present_Session))
          return false;
        if (!this.Session.equals(that.Session))
          return false;
      }

      boolean this_present_iLockType = true;
      boolean that_present_iLockType = true;
      if (this_present_iLockType || that_present_iLockType) {
        if (!(this_present_iLockType && that_present_iLockType))
          return false;
        if (this.iLockType != that.iLockType)
          return false;
      }

      boolean this_present_strPassword = true && this.isSetStrPassword();
      boolean that_present_strPassword = true && that.isSetStrPassword();
      if (this_present_strPassword || that_present_strPassword) {
        if (!(this_present_strPassword && that_present_strPassword))
          return false;
        if (!this.strPassword.equals(that.strPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(inputPasswd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Session, other.Session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetILockType()).compareTo(other.isSetILockType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetILockType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iLockType, other.iLockType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrPassword()).compareTo(other.isSetStrPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strPassword, other.strPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inputPasswd_args(");
      boolean first = true;

      sb.append("Session:");
      if (this.Session == null) {
        sb.append("null");
      } else {
        sb.append(this.Session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iLockType:");
      sb.append(this.iLockType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strPassword:");
      if (this.strPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.strPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inputPasswd_argsStandardSchemeFactory implements SchemeFactory {
      public inputPasswd_argsStandardScheme getScheme() {
        return new inputPasswd_argsStandardScheme();
      }
    }

    private static class inputPasswd_argsStandardScheme extends StandardScheme<inputPasswd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inputPasswd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // I_LOCK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iLockType = iprot.readI32();
                struct.setILockTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STR_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strPassword = iprot.readString();
                struct.setStrPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inputPasswd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.Session);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(I_LOCK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.iLockType);
        oprot.writeFieldEnd();
        if (struct.strPassword != null) {
          oprot.writeFieldBegin(STR_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.strPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inputPasswd_argsTupleSchemeFactory implements SchemeFactory {
      public inputPasswd_argsTupleScheme getScheme() {
        return new inputPasswd_argsTupleScheme();
      }
    }

    private static class inputPasswd_argsTupleScheme extends TupleScheme<inputPasswd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inputPasswd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetILockType()) {
          optionals.set(1);
        }
        if (struct.isSetStrPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSession()) {
          oprot.writeString(struct.Session);
        }
        if (struct.isSetILockType()) {
          oprot.writeI32(struct.iLockType);
        }
        if (struct.isSetStrPassword()) {
          oprot.writeString(struct.strPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inputPasswd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.Session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iLockType = iprot.readI32();
          struct.setILockTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.strPassword = iprot.readString();
          struct.setStrPasswordIsSet(true);
        }
      }
    }

  }

  public static class inputPasswd_result implements org.apache.thrift.TBase<inputPasswd_result, inputPasswd_result._Fields>, java.io.Serializable, Cloneable, Comparable<inputPasswd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inputPasswd_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inputPasswd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inputPasswd_resultTupleSchemeFactory());
    }

    /**
     * 抛出异常
     */
    public AirException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 抛出异常
       */
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inputPasswd_result.class, metaDataMap);
    }

    public inputPasswd_result() {
    }

    public inputPasswd_result(
      AirException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inputPasswd_result(inputPasswd_result other) {
      if (other.isSetEx()) {
        this.ex = new AirException(other.ex);
      }
    }

    public inputPasswd_result deepCopy() {
      return new inputPasswd_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    /**
     * 抛出异常
     */
    public AirException getEx() {
      return this.ex;
    }

    /**
     * 抛出异常
     */
    public inputPasswd_result setEx(AirException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((AirException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inputPasswd_result)
        return this.equals((inputPasswd_result)that);
      return false;
    }

    public boolean equals(inputPasswd_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(inputPasswd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inputPasswd_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inputPasswd_resultStandardSchemeFactory implements SchemeFactory {
      public inputPasswd_resultStandardScheme getScheme() {
        return new inputPasswd_resultStandardScheme();
      }
    }

    private static class inputPasswd_resultStandardScheme extends StandardScheme<inputPasswd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inputPasswd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new AirException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inputPasswd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inputPasswd_resultTupleSchemeFactory implements SchemeFactory {
      public inputPasswd_resultTupleScheme getScheme() {
        return new inputPasswd_resultTupleScheme();
      }
    }

    private static class inputPasswd_resultTupleScheme extends TupleScheme<inputPasswd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inputPasswd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inputPasswd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new AirException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class ResetPasswd_args implements org.apache.thrift.TBase<ResetPasswd_args, ResetPasswd_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResetPasswd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResetPasswd_args");

    private static final org.apache.thrift.protocol.TField STR_DEV_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("strDevCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField I_LOCK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("iLockType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField STR_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("strPassword", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ResetPasswd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ResetPasswd_argsTupleSchemeFactory());
    }

    /**
     * 加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口
     */
    public String strDevCode; // required
    /**
     * 锁类型
     */
    public int iLockType; // required
    /**
     * 密码
     */
    public String strPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口
       */
      STR_DEV_CODE((short)1, "strDevCode"),
      /**
       * 锁类型
       */
      I_LOCK_TYPE((short)2, "iLockType"),
      /**
       * 密码
       */
      STR_PASSWORD((short)3, "strPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR_DEV_CODE
            return STR_DEV_CODE;
          case 2: // I_LOCK_TYPE
            return I_LOCK_TYPE;
          case 3: // STR_PASSWORD
            return STR_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ILOCKTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR_DEV_CODE, new org.apache.thrift.meta_data.FieldMetaData("strDevCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.I_LOCK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("iLockType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STR_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("strPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResetPasswd_args.class, metaDataMap);
    }

    public ResetPasswd_args() {
    }

    public ResetPasswd_args(
      String strDevCode,
      int iLockType,
      String strPassword)
    {
      this();
      this.strDevCode = strDevCode;
      this.iLockType = iLockType;
      setILockTypeIsSet(true);
      this.strPassword = strPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResetPasswd_args(ResetPasswd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStrDevCode()) {
        this.strDevCode = other.strDevCode;
      }
      this.iLockType = other.iLockType;
      if (other.isSetStrPassword()) {
        this.strPassword = other.strPassword;
      }
    }

    public ResetPasswd_args deepCopy() {
      return new ResetPasswd_args(this);
    }

    @Override
    public void clear() {
      this.strDevCode = null;
      setILockTypeIsSet(false);
      this.iLockType = 0;
      this.strPassword = null;
    }

    /**
     * 加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口
     */
    public String getStrDevCode() {
      return this.strDevCode;
    }

    /**
     * 加密后的设备编码：使得只有某些指定设备才可以进行重置密码，防止黑客通过抓包得到接口并直接调用接口
     */
    public ResetPasswd_args setStrDevCode(String strDevCode) {
      this.strDevCode = strDevCode;
      return this;
    }

    public void unsetStrDevCode() {
      this.strDevCode = null;
    }

    /** Returns true if field strDevCode is set (has been assigned a value) and false otherwise */
    public boolean isSetStrDevCode() {
      return this.strDevCode != null;
    }

    public void setStrDevCodeIsSet(boolean value) {
      if (!value) {
        this.strDevCode = null;
      }
    }

    /**
     * 锁类型
     */
    public int getILockType() {
      return this.iLockType;
    }

    /**
     * 锁类型
     */
    public ResetPasswd_args setILockType(int iLockType) {
      this.iLockType = iLockType;
      setILockTypeIsSet(true);
      return this;
    }

    public void unsetILockType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ILOCKTYPE_ISSET_ID);
    }

    /** Returns true if field iLockType is set (has been assigned a value) and false otherwise */
    public boolean isSetILockType() {
      return EncodingUtils.testBit(__isset_bitfield, __ILOCKTYPE_ISSET_ID);
    }

    public void setILockTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ILOCKTYPE_ISSET_ID, value);
    }

    /**
     * 密码
     */
    public String getStrPassword() {
      return this.strPassword;
    }

    /**
     * 密码
     */
    public ResetPasswd_args setStrPassword(String strPassword) {
      this.strPassword = strPassword;
      return this;
    }

    public void unsetStrPassword() {
      this.strPassword = null;
    }

    /** Returns true if field strPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetStrPassword() {
      return this.strPassword != null;
    }

    public void setStrPasswordIsSet(boolean value) {
      if (!value) {
        this.strPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STR_DEV_CODE:
        if (value == null) {
          unsetStrDevCode();
        } else {
          setStrDevCode((String)value);
        }
        break;

      case I_LOCK_TYPE:
        if (value == null) {
          unsetILockType();
        } else {
          setILockType((Integer)value);
        }
        break;

      case STR_PASSWORD:
        if (value == null) {
          unsetStrPassword();
        } else {
          setStrPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STR_DEV_CODE:
        return getStrDevCode();

      case I_LOCK_TYPE:
        return Integer.valueOf(getILockType());

      case STR_PASSWORD:
        return getStrPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STR_DEV_CODE:
        return isSetStrDevCode();
      case I_LOCK_TYPE:
        return isSetILockType();
      case STR_PASSWORD:
        return isSetStrPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ResetPasswd_args)
        return this.equals((ResetPasswd_args)that);
      return false;
    }

    public boolean equals(ResetPasswd_args that) {
      if (that == null)
        return false;

      boolean this_present_strDevCode = true && this.isSetStrDevCode();
      boolean that_present_strDevCode = true && that.isSetStrDevCode();
      if (this_present_strDevCode || that_present_strDevCode) {
        if (!(this_present_strDevCode && that_present_strDevCode))
          return false;
        if (!this.strDevCode.equals(that.strDevCode))
          return false;
      }

      boolean this_present_iLockType = true;
      boolean that_present_iLockType = true;
      if (this_present_iLockType || that_present_iLockType) {
        if (!(this_present_iLockType && that_present_iLockType))
          return false;
        if (this.iLockType != that.iLockType)
          return false;
      }

      boolean this_present_strPassword = true && this.isSetStrPassword();
      boolean that_present_strPassword = true && that.isSetStrPassword();
      if (this_present_strPassword || that_present_strPassword) {
        if (!(this_present_strPassword && that_present_strPassword))
          return false;
        if (!this.strPassword.equals(that.strPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ResetPasswd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrDevCode()).compareTo(other.isSetStrDevCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrDevCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strDevCode, other.strDevCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetILockType()).compareTo(other.isSetILockType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetILockType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iLockType, other.iLockType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrPassword()).compareTo(other.isSetStrPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strPassword, other.strPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ResetPasswd_args(");
      boolean first = true;

      sb.append("strDevCode:");
      if (this.strDevCode == null) {
        sb.append("null");
      } else {
        sb.append(this.strDevCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iLockType:");
      sb.append(this.iLockType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strPassword:");
      if (this.strPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.strPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResetPasswd_argsStandardSchemeFactory implements SchemeFactory {
      public ResetPasswd_argsStandardScheme getScheme() {
        return new ResetPasswd_argsStandardScheme();
      }
    }

    private static class ResetPasswd_argsStandardScheme extends StandardScheme<ResetPasswd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ResetPasswd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STR_DEV_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strDevCode = iprot.readString();
                struct.setStrDevCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // I_LOCK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iLockType = iprot.readI32();
                struct.setILockTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STR_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strPassword = iprot.readString();
                struct.setStrPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ResetPasswd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strDevCode != null) {
          oprot.writeFieldBegin(STR_DEV_CODE_FIELD_DESC);
          oprot.writeString(struct.strDevCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(I_LOCK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.iLockType);
        oprot.writeFieldEnd();
        if (struct.strPassword != null) {
          oprot.writeFieldBegin(STR_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.strPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResetPasswd_argsTupleSchemeFactory implements SchemeFactory {
      public ResetPasswd_argsTupleScheme getScheme() {
        return new ResetPasswd_argsTupleScheme();
      }
    }

    private static class ResetPasswd_argsTupleScheme extends TupleScheme<ResetPasswd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResetPasswd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrDevCode()) {
          optionals.set(0);
        }
        if (struct.isSetILockType()) {
          optionals.set(1);
        }
        if (struct.isSetStrPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStrDevCode()) {
          oprot.writeString(struct.strDevCode);
        }
        if (struct.isSetILockType()) {
          oprot.writeI32(struct.iLockType);
        }
        if (struct.isSetStrPassword()) {
          oprot.writeString(struct.strPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResetPasswd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.strDevCode = iprot.readString();
          struct.setStrDevCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iLockType = iprot.readI32();
          struct.setILockTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.strPassword = iprot.readString();
          struct.setStrPasswordIsSet(true);
        }
      }
    }

  }

  public static class ResetPasswd_result implements org.apache.thrift.TBase<ResetPasswd_result, ResetPasswd_result._Fields>, java.io.Serializable, Cloneable, Comparable<ResetPasswd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResetPasswd_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ResetPasswd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ResetPasswd_resultTupleSchemeFactory());
    }

    /**
     * 抛出异常
     */
    public AirException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 抛出异常
       */
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResetPasswd_result.class, metaDataMap);
    }

    public ResetPasswd_result() {
    }

    public ResetPasswd_result(
      AirException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResetPasswd_result(ResetPasswd_result other) {
      if (other.isSetEx()) {
        this.ex = new AirException(other.ex);
      }
    }

    public ResetPasswd_result deepCopy() {
      return new ResetPasswd_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    /**
     * 抛出异常
     */
    public AirException getEx() {
      return this.ex;
    }

    /**
     * 抛出异常
     */
    public ResetPasswd_result setEx(AirException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((AirException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ResetPasswd_result)
        return this.equals((ResetPasswd_result)that);
      return false;
    }

    public boolean equals(ResetPasswd_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ResetPasswd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ResetPasswd_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResetPasswd_resultStandardSchemeFactory implements SchemeFactory {
      public ResetPasswd_resultStandardScheme getScheme() {
        return new ResetPasswd_resultStandardScheme();
      }
    }

    private static class ResetPasswd_resultStandardScheme extends StandardScheme<ResetPasswd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ResetPasswd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new AirException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ResetPasswd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResetPasswd_resultTupleSchemeFactory implements SchemeFactory {
      public ResetPasswd_resultTupleScheme getScheme() {
        return new ResetPasswd_resultTupleScheme();
      }
    }

    private static class ResetPasswd_resultTupleScheme extends TupleScheme<ResetPasswd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResetPasswd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResetPasswd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new AirException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class modifyPasswd_args implements org.apache.thrift.TBase<modifyPasswd_args, modifyPasswd_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyPasswd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyPasswd_args");

    private static final org.apache.thrift.protocol.TField STR_OLD_PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("strOldPasswd", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STR_NEW_PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("strNewPasswd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField I_LOCK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("iLockType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyPasswd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyPasswd_argsTupleSchemeFactory());
    }

    public String strOldPasswd; // required
    public String strNewPasswd; // required
    /**
     * 锁类型
     */
    public int iLockType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STR_OLD_PASSWD((short)1, "strOldPasswd"),
      STR_NEW_PASSWD((short)2, "strNewPasswd"),
      /**
       * 锁类型
       */
      I_LOCK_TYPE((short)3, "iLockType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR_OLD_PASSWD
            return STR_OLD_PASSWD;
          case 2: // STR_NEW_PASSWD
            return STR_NEW_PASSWD;
          case 3: // I_LOCK_TYPE
            return I_LOCK_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ILOCKTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR_OLD_PASSWD, new org.apache.thrift.meta_data.FieldMetaData("strOldPasswd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STR_NEW_PASSWD, new org.apache.thrift.meta_data.FieldMetaData("strNewPasswd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.I_LOCK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("iLockType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyPasswd_args.class, metaDataMap);
    }

    public modifyPasswd_args() {
    }

    public modifyPasswd_args(
      String strOldPasswd,
      String strNewPasswd,
      int iLockType)
    {
      this();
      this.strOldPasswd = strOldPasswd;
      this.strNewPasswd = strNewPasswd;
      this.iLockType = iLockType;
      setILockTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyPasswd_args(modifyPasswd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStrOldPasswd()) {
        this.strOldPasswd = other.strOldPasswd;
      }
      if (other.isSetStrNewPasswd()) {
        this.strNewPasswd = other.strNewPasswd;
      }
      this.iLockType = other.iLockType;
    }

    public modifyPasswd_args deepCopy() {
      return new modifyPasswd_args(this);
    }

    @Override
    public void clear() {
      this.strOldPasswd = null;
      this.strNewPasswd = null;
      setILockTypeIsSet(false);
      this.iLockType = 0;
    }

    public String getStrOldPasswd() {
      return this.strOldPasswd;
    }

    public modifyPasswd_args setStrOldPasswd(String strOldPasswd) {
      this.strOldPasswd = strOldPasswd;
      return this;
    }

    public void unsetStrOldPasswd() {
      this.strOldPasswd = null;
    }

    /** Returns true if field strOldPasswd is set (has been assigned a value) and false otherwise */
    public boolean isSetStrOldPasswd() {
      return this.strOldPasswd != null;
    }

    public void setStrOldPasswdIsSet(boolean value) {
      if (!value) {
        this.strOldPasswd = null;
      }
    }

    public String getStrNewPasswd() {
      return this.strNewPasswd;
    }

    public modifyPasswd_args setStrNewPasswd(String strNewPasswd) {
      this.strNewPasswd = strNewPasswd;
      return this;
    }

    public void unsetStrNewPasswd() {
      this.strNewPasswd = null;
    }

    /** Returns true if field strNewPasswd is set (has been assigned a value) and false otherwise */
    public boolean isSetStrNewPasswd() {
      return this.strNewPasswd != null;
    }

    public void setStrNewPasswdIsSet(boolean value) {
      if (!value) {
        this.strNewPasswd = null;
      }
    }

    /**
     * 锁类型
     */
    public int getILockType() {
      return this.iLockType;
    }

    /**
     * 锁类型
     */
    public modifyPasswd_args setILockType(int iLockType) {
      this.iLockType = iLockType;
      setILockTypeIsSet(true);
      return this;
    }

    public void unsetILockType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ILOCKTYPE_ISSET_ID);
    }

    /** Returns true if field iLockType is set (has been assigned a value) and false otherwise */
    public boolean isSetILockType() {
      return EncodingUtils.testBit(__isset_bitfield, __ILOCKTYPE_ISSET_ID);
    }

    public void setILockTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ILOCKTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STR_OLD_PASSWD:
        if (value == null) {
          unsetStrOldPasswd();
        } else {
          setStrOldPasswd((String)value);
        }
        break;

      case STR_NEW_PASSWD:
        if (value == null) {
          unsetStrNewPasswd();
        } else {
          setStrNewPasswd((String)value);
        }
        break;

      case I_LOCK_TYPE:
        if (value == null) {
          unsetILockType();
        } else {
          setILockType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STR_OLD_PASSWD:
        return getStrOldPasswd();

      case STR_NEW_PASSWD:
        return getStrNewPasswd();

      case I_LOCK_TYPE:
        return Integer.valueOf(getILockType());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STR_OLD_PASSWD:
        return isSetStrOldPasswd();
      case STR_NEW_PASSWD:
        return isSetStrNewPasswd();
      case I_LOCK_TYPE:
        return isSetILockType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyPasswd_args)
        return this.equals((modifyPasswd_args)that);
      return false;
    }

    public boolean equals(modifyPasswd_args that) {
      if (that == null)
        return false;

      boolean this_present_strOldPasswd = true && this.isSetStrOldPasswd();
      boolean that_present_strOldPasswd = true && that.isSetStrOldPasswd();
      if (this_present_strOldPasswd || that_present_strOldPasswd) {
        if (!(this_present_strOldPasswd && that_present_strOldPasswd))
          return false;
        if (!this.strOldPasswd.equals(that.strOldPasswd))
          return false;
      }

      boolean this_present_strNewPasswd = true && this.isSetStrNewPasswd();
      boolean that_present_strNewPasswd = true && that.isSetStrNewPasswd();
      if (this_present_strNewPasswd || that_present_strNewPasswd) {
        if (!(this_present_strNewPasswd && that_present_strNewPasswd))
          return false;
        if (!this.strNewPasswd.equals(that.strNewPasswd))
          return false;
      }

      boolean this_present_iLockType = true;
      boolean that_present_iLockType = true;
      if (this_present_iLockType || that_present_iLockType) {
        if (!(this_present_iLockType && that_present_iLockType))
          return false;
        if (this.iLockType != that.iLockType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyPasswd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrOldPasswd()).compareTo(other.isSetStrOldPasswd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrOldPasswd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strOldPasswd, other.strOldPasswd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrNewPasswd()).compareTo(other.isSetStrNewPasswd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrNewPasswd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strNewPasswd, other.strNewPasswd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetILockType()).compareTo(other.isSetILockType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetILockType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iLockType, other.iLockType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyPasswd_args(");
      boolean first = true;

      sb.append("strOldPasswd:");
      if (this.strOldPasswd == null) {
        sb.append("null");
      } else {
        sb.append(this.strOldPasswd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("strNewPasswd:");
      if (this.strNewPasswd == null) {
        sb.append("null");
      } else {
        sb.append(this.strNewPasswd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iLockType:");
      sb.append(this.iLockType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyPasswd_argsStandardSchemeFactory implements SchemeFactory {
      public modifyPasswd_argsStandardScheme getScheme() {
        return new modifyPasswd_argsStandardScheme();
      }
    }

    private static class modifyPasswd_argsStandardScheme extends StandardScheme<modifyPasswd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyPasswd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STR_OLD_PASSWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strOldPasswd = iprot.readString();
                struct.setStrOldPasswdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STR_NEW_PASSWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strNewPasswd = iprot.readString();
                struct.setStrNewPasswdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // I_LOCK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iLockType = iprot.readI32();
                struct.setILockTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyPasswd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strOldPasswd != null) {
          oprot.writeFieldBegin(STR_OLD_PASSWD_FIELD_DESC);
          oprot.writeString(struct.strOldPasswd);
          oprot.writeFieldEnd();
        }
        if (struct.strNewPasswd != null) {
          oprot.writeFieldBegin(STR_NEW_PASSWD_FIELD_DESC);
          oprot.writeString(struct.strNewPasswd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(I_LOCK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.iLockType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyPasswd_argsTupleSchemeFactory implements SchemeFactory {
      public modifyPasswd_argsTupleScheme getScheme() {
        return new modifyPasswd_argsTupleScheme();
      }
    }

    private static class modifyPasswd_argsTupleScheme extends TupleScheme<modifyPasswd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyPasswd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrOldPasswd()) {
          optionals.set(0);
        }
        if (struct.isSetStrNewPasswd()) {
          optionals.set(1);
        }
        if (struct.isSetILockType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStrOldPasswd()) {
          oprot.writeString(struct.strOldPasswd);
        }
        if (struct.isSetStrNewPasswd()) {
          oprot.writeString(struct.strNewPasswd);
        }
        if (struct.isSetILockType()) {
          oprot.writeI32(struct.iLockType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyPasswd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.strOldPasswd = iprot.readString();
          struct.setStrOldPasswdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strNewPasswd = iprot.readString();
          struct.setStrNewPasswdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iLockType = iprot.readI32();
          struct.setILockTypeIsSet(true);
        }
      }
    }

  }

  public static class modifyPasswd_result implements org.apache.thrift.TBase<modifyPasswd_result, modifyPasswd_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyPasswd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyPasswd_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyPasswd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyPasswd_resultTupleSchemeFactory());
    }

    /**
     * 抛出异常
     */
    public AirException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 抛出异常
       */
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyPasswd_result.class, metaDataMap);
    }

    public modifyPasswd_result() {
    }

    public modifyPasswd_result(
      AirException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyPasswd_result(modifyPasswd_result other) {
      if (other.isSetEx()) {
        this.ex = new AirException(other.ex);
      }
    }

    public modifyPasswd_result deepCopy() {
      return new modifyPasswd_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    /**
     * 抛出异常
     */
    public AirException getEx() {
      return this.ex;
    }

    /**
     * 抛出异常
     */
    public modifyPasswd_result setEx(AirException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((AirException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyPasswd_result)
        return this.equals((modifyPasswd_result)that);
      return false;
    }

    public boolean equals(modifyPasswd_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyPasswd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyPasswd_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyPasswd_resultStandardSchemeFactory implements SchemeFactory {
      public modifyPasswd_resultStandardScheme getScheme() {
        return new modifyPasswd_resultStandardScheme();
      }
    }

    private static class modifyPasswd_resultStandardScheme extends StandardScheme<modifyPasswd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyPasswd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new AirException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyPasswd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyPasswd_resultTupleSchemeFactory implements SchemeFactory {
      public modifyPasswd_resultTupleScheme getScheme() {
        return new modifyPasswd_resultTupleScheme();
      }
    }

    private static class modifyPasswd_resultTupleScheme extends TupleScheme<modifyPasswd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyPasswd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyPasswd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new AirException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
