/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "mythrift.h"

@implementation AirException

- (id) init
{
  return [super initWithName: @"AirException" reason: @"unknown" userInfo: nil];
}

- (id) initWithType: (int) type errorCode: (int64_t) errorCode errorMessage: (NSString *) errorMessage debugMessage: (NSString *) debugMessage
{
  self = [self init];
  __type = type;
  __type_isset = YES;
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __errorMessage = [errorMessage retain_stub];
  __errorMessage_isset = YES;
  __debugMessage = [debugMessage retain_stub];
  __debugMessage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt64ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"errorMessage"])
  {
    __errorMessage = [[decoder decodeObjectForKey: @"errorMessage"] retain_stub];
    __errorMessage_isset = YES;
  }
  if ([decoder containsValueForKey: @"debugMessage"])
  {
    __debugMessage = [[decoder decodeObjectForKey: @"debugMessage"] retain_stub];
    __debugMessage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__errorCode_isset)
  {
    [encoder encodeInt64: __errorCode forKey: @"errorCode"];
  }
  if (__errorMessage_isset)
  {
    [encoder encodeObject: __errorMessage forKey: @"errorMessage"];
  }
  if (__debugMessage_isset)
  {
    [encoder encodeObject: __debugMessage forKey: @"debugMessage"];
  }
}

- (void) dealloc
{
  [__errorMessage release_stub];
  [__debugMessage release_stub];
  [super dealloc_stub];
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (int64_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int64_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (NSString *) errorMessage {
  return [[__errorMessage retain_stub] autorelease_stub];
}

- (void) setErrorMessage: (NSString *) errorMessage {
  [errorMessage retain_stub];
  [__errorMessage release_stub];
  __errorMessage = errorMessage;
  __errorMessage_isset = YES;
}

- (BOOL) errorMessageIsSet {
  return __errorMessage_isset;
}

- (void) unsetErrorMessage {
  [__errorMessage release_stub];
  __errorMessage = nil;
  __errorMessage_isset = NO;
}

- (NSString *) debugMessage {
  return [[__debugMessage retain_stub] autorelease_stub];
}

- (void) setDebugMessage: (NSString *) debugMessage {
  [debugMessage retain_stub];
  [__debugMessage release_stub];
  __debugMessage = debugMessage;
  __debugMessage_isset = YES;
}

- (BOOL) debugMessageIsSet {
  return __debugMessage_isset;
}

- (void) unsetDebugMessage {
  [__debugMessage release_stub];
  __debugMessage = nil;
  __debugMessage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setErrorMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDebugMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AirException"];
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__errorMessage_isset) {
    if (__errorMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"errorMessage" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __errorMessage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__debugMessage_isset) {
    if (__debugMessage != nil) {
      [outProtocol writeFieldBeginWithName: @"debugMessage" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __debugMessage];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__type_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'type' is not set."];
  }
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__errorMessage_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorMessage' is not set."];
  }
  if (!__debugMessage_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'debugMessage' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AirException("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",errorCode:"];
  [ms appendFormat: @"%qi", __errorCode];
  [ms appendString: @",errorMessage:"];
  [ms appendFormat: @"\"%@\"", __errorMessage];
  [ms appendString: @",debugMessage:"];
  [ms appendFormat: @"\"%@\"", __debugMessage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation mythriftConstants
+ (void) initialize {
}
@end

@interface connectServer_args : NSObject <TBase, NSCoding> {
  NSString * __strDevCode;

  BOOL __strDevCode_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=strDevCode, setter=setStrDevCode:) NSString * strDevCode;
#endif

- (id) init;
- (id) initWithStrDevCode: (NSString *) strDevCode;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) strDevCode;
- (void) setStrDevCode: (NSString *) strDevCode;
#endif
- (BOOL) strDevCodeIsSet;

@end

@implementation connectServer_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStrDevCode: (NSString *) strDevCode
{
  self = [super init];
  __strDevCode = [strDevCode retain_stub];
  __strDevCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"strDevCode"])
  {
    __strDevCode = [[decoder decodeObjectForKey: @"strDevCode"] retain_stub];
    __strDevCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__strDevCode_isset)
  {
    [encoder encodeObject: __strDevCode forKey: @"strDevCode"];
  }
}

- (void) dealloc
{
  [__strDevCode release_stub];
  [super dealloc_stub];
}

- (NSString *) strDevCode {
  return [[__strDevCode retain_stub] autorelease_stub];
}

- (void) setStrDevCode: (NSString *) strDevCode {
  [strDevCode retain_stub];
  [__strDevCode release_stub];
  __strDevCode = strDevCode;
  __strDevCode_isset = YES;
}

- (BOOL) strDevCodeIsSet {
  return __strDevCode_isset;
}

- (void) unsetStrDevCode {
  [__strDevCode release_stub];
  __strDevCode = nil;
  __strDevCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStrDevCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"connectServer_args"];
  if (__strDevCode_isset) {
    if (__strDevCode != nil) {
      [outProtocol writeFieldBeginWithName: @"strDevCode" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __strDevCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"connectServer_args("];
  [ms appendString: @"strDevCode:"];
  [ms appendFormat: @"\"%@\"", __strDevCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConnectServer_result : NSObject <TBase, NSCoding> {
  NSString * __success;
  AirException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) AirException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (AirException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (AirException *) ex;
- (void) setEx: (AirException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation ConnectServer_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (AirException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (AirException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (AirException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          AirException *fieldValue = [[AirException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConnectServer_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConnectServer_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface disconnectServer_args : NSObject <TBase, NSCoding> {
  NSString * __Session;

  BOOL __Session_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=session, setter=setSession:) NSString * Session;
#endif

- (id) init;
- (id) initWithSession: (NSString *) Session;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) session;
- (void) setSession: (NSString *) Session;
#endif
- (BOOL) SessionIsSet;

@end

@implementation disconnectServer_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) Session
{
  self = [super init];
  __Session = [Session retain_stub];
  __Session_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"Session"])
  {
    __Session = [[decoder decodeObjectForKey: @"Session"] retain_stub];
    __Session_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__Session_isset)
  {
    [encoder encodeObject: __Session forKey: @"Session"];
  }
}

- (void) dealloc
{
  [__Session release_stub];
  [super dealloc_stub];
}

- (NSString *) Session {
  return [[__Session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) Session {
  [Session retain_stub];
  [__Session release_stub];
  __Session = Session;
  __Session_isset = YES;
}

- (BOOL) SessionIsSet {
  return __Session_isset;
}

- (void) unsetSession {
  [__Session release_stub];
  __Session = nil;
  __Session_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"disconnectServer_args"];
  if (__Session_isset) {
    if (__Session != nil) {
      [outProtocol writeFieldBeginWithName: @"Session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __Session];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"disconnectServer_args("];
  [ms appendString: @"Session:"];
  [ms appendFormat: @"\"%@\"", __Session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DisconnectServer_result : NSObject <TBase, NSCoding> {
  AirException * __ex;

  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ex, setter=setEx:) AirException * ex;
#endif

- (id) init;
- (id) initWithEx: (AirException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AirException *) ex;
- (void) setEx: (AirException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation DisconnectServer_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEx: (AirException *) ex
{
  self = [super init];
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__ex release_stub];
  [super dealloc_stub];
}

- (AirException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (AirException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AirException *fieldValue = [[AirException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DisconnectServer_result"];

  if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DisconnectServer_result("];
  [ms appendString: @"ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface keepAlive_args : NSObject <TBase, NSCoding> {
  NSString * __Session;

  BOOL __Session_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=session, setter=setSession:) NSString * Session;
#endif

- (id) init;
- (id) initWithSession: (NSString *) Session;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) session;
- (void) setSession: (NSString *) Session;
#endif
- (BOOL) SessionIsSet;

@end

@implementation keepAlive_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) Session
{
  self = [super init];
  __Session = [Session retain_stub];
  __Session_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"Session"])
  {
    __Session = [[decoder decodeObjectForKey: @"Session"] retain_stub];
    __Session_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__Session_isset)
  {
    [encoder encodeObject: __Session forKey: @"Session"];
  }
}

- (void) dealloc
{
  [__Session release_stub];
  [super dealloc_stub];
}

- (NSString *) Session {
  return [[__Session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) Session {
  [Session retain_stub];
  [__Session release_stub];
  __Session = Session;
  __Session_isset = YES;
}

- (BOOL) SessionIsSet {
  return __Session_isset;
}

- (void) unsetSession {
  [__Session release_stub];
  __Session = nil;
  __Session_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"keepAlive_args"];
  if (__Session_isset) {
    if (__Session != nil) {
      [outProtocol writeFieldBeginWithName: @"Session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __Session];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"keepAlive_args("];
  [ms appendString: @"Session:"];
  [ms appendFormat: @"\"%@\"", __Session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface KeepAlive_result : NSObject <TBase, NSCoding> {
  AirException * __ex;

  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ex, setter=setEx:) AirException * ex;
#endif

- (id) init;
- (id) initWithEx: (AirException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AirException *) ex;
- (void) setEx: (AirException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation KeepAlive_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEx: (AirException *) ex
{
  self = [super init];
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__ex release_stub];
  [super dealloc_stub];
}

- (AirException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (AirException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AirException *fieldValue = [[AirException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"KeepAlive_result"];

  if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"KeepAlive_result("];
  [ms appendString: @"ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface inputPasswd_args : NSObject <TBase, NSCoding> {
  NSString * __Session;
  int32_t __iLockType;
  NSString * __strPassword;

  BOOL __Session_isset;
  BOOL __iLockType_isset;
  BOOL __strPassword_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=session, setter=setSession:) NSString * Session;
@property (nonatomic, getter=iLockType, setter=setILockType:) int32_t iLockType;
@property (nonatomic, retain, getter=strPassword, setter=setStrPassword:) NSString * strPassword;
#endif

- (id) init;
- (id) initWithSession: (NSString *) Session iLockType: (int32_t) iLockType strPassword: (NSString *) strPassword;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) session;
- (void) setSession: (NSString *) Session;
#endif
- (BOOL) SessionIsSet;

#if !__has_feature(objc_arc)
- (int32_t) iLockType;
- (void) setILockType: (int32_t) iLockType;
#endif
- (BOOL) iLockTypeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) strPassword;
- (void) setStrPassword: (NSString *) strPassword;
#endif
- (BOOL) strPasswordIsSet;

@end

@implementation inputPasswd_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) Session iLockType: (int32_t) iLockType strPassword: (NSString *) strPassword
{
  self = [super init];
  __Session = [Session retain_stub];
  __Session_isset = YES;
  __iLockType = iLockType;
  __iLockType_isset = YES;
  __strPassword = [strPassword retain_stub];
  __strPassword_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"Session"])
  {
    __Session = [[decoder decodeObjectForKey: @"Session"] retain_stub];
    __Session_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLockType"])
  {
    __iLockType = [decoder decodeInt32ForKey: @"iLockType"];
    __iLockType_isset = YES;
  }
  if ([decoder containsValueForKey: @"strPassword"])
  {
    __strPassword = [[decoder decodeObjectForKey: @"strPassword"] retain_stub];
    __strPassword_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__Session_isset)
  {
    [encoder encodeObject: __Session forKey: @"Session"];
  }
  if (__iLockType_isset)
  {
    [encoder encodeInt32: __iLockType forKey: @"iLockType"];
  }
  if (__strPassword_isset)
  {
    [encoder encodeObject: __strPassword forKey: @"strPassword"];
  }
}

- (void) dealloc
{
  [__Session release_stub];
  [__strPassword release_stub];
  [super dealloc_stub];
}

- (NSString *) Session {
  return [[__Session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) Session {
  [Session retain_stub];
  [__Session release_stub];
  __Session = Session;
  __Session_isset = YES;
}

- (BOOL) SessionIsSet {
  return __Session_isset;
}

- (void) unsetSession {
  [__Session release_stub];
  __Session = nil;
  __Session_isset = NO;
}

- (int32_t) iLockType {
  return __iLockType;
}

- (void) setILockType: (int32_t) iLockType {
  __iLockType = iLockType;
  __iLockType_isset = YES;
}

- (BOOL) iLockTypeIsSet {
  return __iLockType_isset;
}

- (void) unsetILockType {
  __iLockType_isset = NO;
}

- (NSString *) strPassword {
  return [[__strPassword retain_stub] autorelease_stub];
}

- (void) setStrPassword: (NSString *) strPassword {
  [strPassword retain_stub];
  [__strPassword release_stub];
  __strPassword = strPassword;
  __strPassword_isset = YES;
}

- (BOOL) strPasswordIsSet {
  return __strPassword_isset;
}

- (void) unsetStrPassword {
  [__strPassword release_stub];
  __strPassword = nil;
  __strPassword_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setILockType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStrPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"inputPasswd_args"];
  if (__Session_isset) {
    if (__Session != nil) {
      [outProtocol writeFieldBeginWithName: @"Session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __Session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iLockType_isset) {
    [outProtocol writeFieldBeginWithName: @"iLockType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iLockType];
    [outProtocol writeFieldEnd];
  }
  if (__strPassword_isset) {
    if (__strPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"strPassword" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __strPassword];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"inputPasswd_args("];
  [ms appendString: @"Session:"];
  [ms appendFormat: @"\"%@\"", __Session];
  [ms appendString: @",iLockType:"];
  [ms appendFormat: @"%i", __iLockType];
  [ms appendString: @",strPassword:"];
  [ms appendFormat: @"\"%@\"", __strPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface InputPasswd_result : NSObject <TBase, NSCoding> {
  AirException * __ex;

  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ex, setter=setEx:) AirException * ex;
#endif

- (id) init;
- (id) initWithEx: (AirException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AirException *) ex;
- (void) setEx: (AirException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation InputPasswd_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEx: (AirException *) ex
{
  self = [super init];
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__ex release_stub];
  [super dealloc_stub];
}

- (AirException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (AirException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AirException *fieldValue = [[AirException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InputPasswd_result"];

  if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"InputPasswd_result("];
  [ms appendString: @"ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ResetPasswd_args : NSObject <TBase, NSCoding> {
  NSString * __strDevCode;
  int32_t __iLockType;
  NSString * __strPassword;

  BOOL __strDevCode_isset;
  BOOL __iLockType_isset;
  BOOL __strPassword_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=strDevCode, setter=setStrDevCode:) NSString * strDevCode;
@property (nonatomic, getter=iLockType, setter=setILockType:) int32_t iLockType;
@property (nonatomic, retain, getter=strPassword, setter=setStrPassword:) NSString * strPassword;
#endif

- (id) init;
- (id) initWithStrDevCode: (NSString *) strDevCode iLockType: (int32_t) iLockType strPassword: (NSString *) strPassword;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) strDevCode;
- (void) setStrDevCode: (NSString *) strDevCode;
#endif
- (BOOL) strDevCodeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) iLockType;
- (void) setILockType: (int32_t) iLockType;
#endif
- (BOOL) iLockTypeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) strPassword;
- (void) setStrPassword: (NSString *) strPassword;
#endif
- (BOOL) strPasswordIsSet;

@end

@implementation ResetPasswd_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStrDevCode: (NSString *) strDevCode iLockType: (int32_t) iLockType strPassword: (NSString *) strPassword
{
  self = [super init];
  __strDevCode = [strDevCode retain_stub];
  __strDevCode_isset = YES;
  __iLockType = iLockType;
  __iLockType_isset = YES;
  __strPassword = [strPassword retain_stub];
  __strPassword_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"strDevCode"])
  {
    __strDevCode = [[decoder decodeObjectForKey: @"strDevCode"] retain_stub];
    __strDevCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLockType"])
  {
    __iLockType = [decoder decodeInt32ForKey: @"iLockType"];
    __iLockType_isset = YES;
  }
  if ([decoder containsValueForKey: @"strPassword"])
  {
    __strPassword = [[decoder decodeObjectForKey: @"strPassword"] retain_stub];
    __strPassword_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__strDevCode_isset)
  {
    [encoder encodeObject: __strDevCode forKey: @"strDevCode"];
  }
  if (__iLockType_isset)
  {
    [encoder encodeInt32: __iLockType forKey: @"iLockType"];
  }
  if (__strPassword_isset)
  {
    [encoder encodeObject: __strPassword forKey: @"strPassword"];
  }
}

- (void) dealloc
{
  [__strDevCode release_stub];
  [__strPassword release_stub];
  [super dealloc_stub];
}

- (NSString *) strDevCode {
  return [[__strDevCode retain_stub] autorelease_stub];
}

- (void) setStrDevCode: (NSString *) strDevCode {
  [strDevCode retain_stub];
  [__strDevCode release_stub];
  __strDevCode = strDevCode;
  __strDevCode_isset = YES;
}

- (BOOL) strDevCodeIsSet {
  return __strDevCode_isset;
}

- (void) unsetStrDevCode {
  [__strDevCode release_stub];
  __strDevCode = nil;
  __strDevCode_isset = NO;
}

- (int32_t) iLockType {
  return __iLockType;
}

- (void) setILockType: (int32_t) iLockType {
  __iLockType = iLockType;
  __iLockType_isset = YES;
}

- (BOOL) iLockTypeIsSet {
  return __iLockType_isset;
}

- (void) unsetILockType {
  __iLockType_isset = NO;
}

- (NSString *) strPassword {
  return [[__strPassword retain_stub] autorelease_stub];
}

- (void) setStrPassword: (NSString *) strPassword {
  [strPassword retain_stub];
  [__strPassword release_stub];
  __strPassword = strPassword;
  __strPassword_isset = YES;
}

- (BOOL) strPasswordIsSet {
  return __strPassword_isset;
}

- (void) unsetStrPassword {
  [__strPassword release_stub];
  __strPassword = nil;
  __strPassword_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStrDevCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setILockType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStrPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResetPasswd_args"];
  if (__strDevCode_isset) {
    if (__strDevCode != nil) {
      [outProtocol writeFieldBeginWithName: @"strDevCode" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __strDevCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iLockType_isset) {
    [outProtocol writeFieldBeginWithName: @"iLockType" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __iLockType];
    [outProtocol writeFieldEnd];
  }
  if (__strPassword_isset) {
    if (__strPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"strPassword" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __strPassword];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResetPasswd_args("];
  [ms appendString: @"strDevCode:"];
  [ms appendFormat: @"\"%@\"", __strDevCode];
  [ms appendString: @",iLockType:"];
  [ms appendFormat: @"%i", __iLockType];
  [ms appendString: @",strPassword:"];
  [ms appendFormat: @"\"%@\"", __strPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ResetPasswd_result : NSObject <TBase, NSCoding> {
  AirException * __ex;

  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ex, setter=setEx:) AirException * ex;
#endif

- (id) init;
- (id) initWithEx: (AirException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AirException *) ex;
- (void) setEx: (AirException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation ResetPasswd_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEx: (AirException *) ex
{
  self = [super init];
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__ex release_stub];
  [super dealloc_stub];
}

- (AirException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (AirException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AirException *fieldValue = [[AirException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResetPasswd_result"];

  if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResetPasswd_result("];
  [ms appendString: @"ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface modifyPasswd_args : NSObject <TBase, NSCoding> {
  NSString * __strOldPasswd;
  NSString * __strNewPasswd;
  int32_t __iLockType;

  BOOL __strOldPasswd_isset;
  BOOL __strNewPasswd_isset;
  BOOL __iLockType_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=strOldPasswd, setter=setStrOldPasswd:) NSString * strOldPasswd;
@property (nonatomic, retain, getter=strNewPasswd, setter=setStrNewPasswd:) NSString * strNewPasswd;
@property (nonatomic, getter=iLockType, setter=setILockType:) int32_t iLockType;
#endif

- (id) init;
- (id) initWithStrOldPasswd: (NSString *) strOldPasswd strNewPasswd: (NSString *) strNewPasswd iLockType: (int32_t) iLockType;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) strOldPasswd;
- (void) setStrOldPasswd: (NSString *) strOldPasswd;
#endif
- (BOOL) strOldPasswdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) strNewPasswd;
- (void) setStrNewPasswd: (NSString *) strNewPasswd;
#endif
- (BOOL) strNewPasswdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) iLockType;
- (void) setILockType: (int32_t) iLockType;
#endif
- (BOOL) iLockTypeIsSet;

@end

@implementation modifyPasswd_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithStrOldPasswd: (NSString *) strOldPasswd strNewPasswd: (NSString *) strNewPasswd iLockType: (int32_t) iLockType
{
  self = [super init];
  __strOldPasswd = [strOldPasswd retain_stub];
  __strOldPasswd_isset = YES;
  __strNewPasswd = [strNewPasswd retain_stub];
  __strNewPasswd_isset = YES;
  __iLockType = iLockType;
  __iLockType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"strOldPasswd"])
  {
    __strOldPasswd = [[decoder decodeObjectForKey: @"strOldPasswd"] retain_stub];
    __strOldPasswd_isset = YES;
  }
  if ([decoder containsValueForKey: @"strNewPasswd"])
  {
    __strNewPasswd = [[decoder decodeObjectForKey: @"strNewPasswd"] retain_stub];
    __strNewPasswd_isset = YES;
  }
  if ([decoder containsValueForKey: @"iLockType"])
  {
    __iLockType = [decoder decodeInt32ForKey: @"iLockType"];
    __iLockType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__strOldPasswd_isset)
  {
    [encoder encodeObject: __strOldPasswd forKey: @"strOldPasswd"];
  }
  if (__strNewPasswd_isset)
  {
    [encoder encodeObject: __strNewPasswd forKey: @"strNewPasswd"];
  }
  if (__iLockType_isset)
  {
    [encoder encodeInt32: __iLockType forKey: @"iLockType"];
  }
}

- (void) dealloc
{
  [__strOldPasswd release_stub];
  [__strNewPasswd release_stub];
  [super dealloc_stub];
}

- (NSString *) strOldPasswd {
  return [[__strOldPasswd retain_stub] autorelease_stub];
}

- (void) setStrOldPasswd: (NSString *) strOldPasswd {
  [strOldPasswd retain_stub];
  [__strOldPasswd release_stub];
  __strOldPasswd = strOldPasswd;
  __strOldPasswd_isset = YES;
}

- (BOOL) strOldPasswdIsSet {
  return __strOldPasswd_isset;
}

- (void) unsetStrOldPasswd {
  [__strOldPasswd release_stub];
  __strOldPasswd = nil;
  __strOldPasswd_isset = NO;
}

- (NSString *) strNewPasswd {
  return [[__strNewPasswd retain_stub] autorelease_stub];
}

- (void) setStrNewPasswd: (NSString *) strNewPasswd {
  [strNewPasswd retain_stub];
  [__strNewPasswd release_stub];
  __strNewPasswd = strNewPasswd;
  __strNewPasswd_isset = YES;
}

- (BOOL) strNewPasswdIsSet {
  return __strNewPasswd_isset;
}

- (void) unsetStrNewPasswd {
  [__strNewPasswd release_stub];
  __strNewPasswd = nil;
  __strNewPasswd_isset = NO;
}

- (int32_t) iLockType {
  return __iLockType;
}

- (void) setILockType: (int32_t) iLockType {
  __iLockType = iLockType;
  __iLockType_isset = YES;
}

- (BOOL) iLockTypeIsSet {
  return __iLockType_isset;
}

- (void) unsetILockType {
  __iLockType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStrOldPasswd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStrNewPasswd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setILockType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"modifyPasswd_args"];
  if (__strOldPasswd_isset) {
    if (__strOldPasswd != nil) {
      [outProtocol writeFieldBeginWithName: @"strOldPasswd" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __strOldPasswd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__strNewPasswd_isset) {
    if (__strNewPasswd != nil) {
      [outProtocol writeFieldBeginWithName: @"strNewPasswd" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __strNewPasswd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__iLockType_isset) {
    [outProtocol writeFieldBeginWithName: @"iLockType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __iLockType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"modifyPasswd_args("];
  [ms appendString: @"strOldPasswd:"];
  [ms appendFormat: @"\"%@\"", __strOldPasswd];
  [ms appendString: @",strNewPasswd:"];
  [ms appendFormat: @"\"%@\"", __strNewPasswd];
  [ms appendString: @",iLockType:"];
  [ms appendFormat: @"%i", __iLockType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ModifyPasswd_result : NSObject <TBase, NSCoding> {
  AirException * __ex;

  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ex, setter=setEx:) AirException * ex;
#endif

- (id) init;
- (id) initWithEx: (AirException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AirException *) ex;
- (void) setEx: (AirException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation ModifyPasswd_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEx: (AirException *) ex
{
  self = [super init];
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__ex release_stub];
  [super dealloc_stub];
}

- (AirException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (AirException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AirException *fieldValue = [[AirException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ModifyPasswd_result"];

  if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ModifyPasswd_result("];
  [ms appendString: @"ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation passwordLockClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_connectServer: (NSString *) strDevCode
{
  [outProtocol writeMessageBeginWithName: @"connectServer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"connectServer_args"];
  if (strDevCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"strDevCode" type: TType_STRING fieldID: 1];
    [outProtocol writeString: strDevCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_connectServer
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConnectServer_result * result = [[[ConnectServer_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"connectServer failed: unknown result"];
}

- (NSString *) connectServer: (NSString *) strDevCode
{
  [self send_connectServer : strDevCode];
  return [self recv_connectServer];
}

- (void) send_disconnectServer: (NSString *) Session
{
  [outProtocol writeMessageBeginWithName: @"disconnectServer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"disconnectServer_args"];
  if (Session != nil)  {
    [outProtocol writeFieldBeginWithName: @"Session" type: TType_STRING fieldID: 1];
    [outProtocol writeString: Session];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_disconnectServer
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  DisconnectServer_result * result = [[[DisconnectServer_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result exIsSet]) {
    @throw [result ex];
  }
  return;
}

- (void) disconnectServer: (NSString *) Session
{
  [self send_disconnectServer : Session];
  [self recv_disconnectServer];
}

- (void) send_keepAlive: (NSString *) Session
{
  [outProtocol writeMessageBeginWithName: @"keepAlive" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"keepAlive_args"];
  if (Session != nil)  {
    [outProtocol writeFieldBeginWithName: @"Session" type: TType_STRING fieldID: 1];
    [outProtocol writeString: Session];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_keepAlive
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  KeepAlive_result * result = [[[KeepAlive_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result exIsSet]) {
    @throw [result ex];
  }
  return;
}

- (void) keepAlive: (NSString *) Session
{
  [self send_keepAlive : Session];
  [self recv_keepAlive];
}

- (void) send_inputPasswd: (NSString *) Session iLockType: (int32_t) iLockType strPassword: (NSString *) strPassword
{
  [outProtocol writeMessageBeginWithName: @"inputPasswd" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"inputPasswd_args"];
  if (Session != nil)  {
    [outProtocol writeFieldBeginWithName: @"Session" type: TType_STRING fieldID: 1];
    [outProtocol writeString: Session];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"iLockType" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: iLockType];
  [outProtocol writeFieldEnd];
  if (strPassword != nil)  {
    [outProtocol writeFieldBeginWithName: @"strPassword" type: TType_STRING fieldID: 3];
    [outProtocol writeString: strPassword];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_inputPasswd
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  InputPasswd_result * result = [[[InputPasswd_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result exIsSet]) {
    @throw [result ex];
  }
  return;
}

- (void) inputPasswd: (NSString *) Session iLockType: (int32_t) iLockType strPassword: (NSString *) strPassword
{
  [self send_inputPasswd : Session iLockType: iLockType strPassword: strPassword];
  [self recv_inputPasswd];
}

- (void) send_ResetPasswd: (NSString *) strDevCode iLockType: (int32_t) iLockType strPassword: (NSString *) strPassword
{
  [outProtocol writeMessageBeginWithName: @"ResetPasswd" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ResetPasswd_args"];
  if (strDevCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"strDevCode" type: TType_STRING fieldID: 1];
    [outProtocol writeString: strDevCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"iLockType" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: iLockType];
  [outProtocol writeFieldEnd];
  if (strPassword != nil)  {
    [outProtocol writeFieldBeginWithName: @"strPassword" type: TType_STRING fieldID: 3];
    [outProtocol writeString: strPassword];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_ResetPasswd
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ResetPasswd_result * result = [[[ResetPasswd_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result exIsSet]) {
    @throw [result ex];
  }
  return;
}

- (void) ResetPasswd: (NSString *) strDevCode iLockType: (int32_t) iLockType strPassword: (NSString *) strPassword
{
  [self send_ResetPasswd : strDevCode iLockType: iLockType strPassword: strPassword];
  [self recv_ResetPasswd];
}

- (void) send_modifyPasswd: (NSString *) strOldPasswd strNewPasswd: (NSString *) strNewPasswd iLockType: (int32_t) iLockType
{
  [outProtocol writeMessageBeginWithName: @"modifyPasswd" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"modifyPasswd_args"];
  if (strOldPasswd != nil)  {
    [outProtocol writeFieldBeginWithName: @"strOldPasswd" type: TType_STRING fieldID: 1];
    [outProtocol writeString: strOldPasswd];
    [outProtocol writeFieldEnd];
  }
  if (strNewPasswd != nil)  {
    [outProtocol writeFieldBeginWithName: @"strNewPasswd" type: TType_STRING fieldID: 2];
    [outProtocol writeString: strNewPasswd];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"iLockType" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: iLockType];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_modifyPasswd
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ModifyPasswd_result * result = [[[ModifyPasswd_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result exIsSet]) {
    @throw [result ex];
  }
  return;
}

- (void) modifyPasswd: (NSString *) strOldPasswd strNewPasswd: (NSString *) strNewPasswd iLockType: (int32_t) iLockType
{
  [self send_modifyPasswd : strOldPasswd strNewPasswd: strNewPasswd iLockType: iLockType];
  [self recv_modifyPasswd];
}

@end

@implementation passwordLockProcessor

- (id) initWithpasswordLock: (id <passwordLock>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_connectServer_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"connectServer"];
  }
  {
    SEL s = @selector(process_disconnectServer_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"disconnectServer"];
  }
  {
    SEL s = @selector(process_keepAlive_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"keepAlive"];
  }
  {
    SEL s = @selector(process_inputPasswd_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"inputPasswd"];
  }
  {
    SEL s = @selector(process_ResetPasswd_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"ResetPasswd"];
  }
  {
    SEL s = @selector(process_modifyPasswd_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"modifyPasswd"];
  }
  return self;
}

- (id<passwordLock>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_connectServer_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  connectServer_args * args = [[connectServer_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConnectServer_result * result = [[ConnectServer_result alloc] init];
  [result setSuccess: [mService connectServer: [args strDevCode]]];
  [outProtocol writeMessageBeginWithName: @"connectServer"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_disconnectServer_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  disconnectServer_args * args = [[disconnectServer_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  DisconnectServer_result * result = [[DisconnectServer_result alloc] init];
  [mService disconnectServer: [args Session]];
  [outProtocol writeMessageBeginWithName: @"disconnectServer"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_keepAlive_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  keepAlive_args * args = [[keepAlive_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  KeepAlive_result * result = [[KeepAlive_result alloc] init];
  [mService keepAlive: [args Session]];
  [outProtocol writeMessageBeginWithName: @"keepAlive"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_inputPasswd_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  inputPasswd_args * args = [[inputPasswd_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  InputPasswd_result * result = [[InputPasswd_result alloc] init];
  [mService inputPasswd: [args Session] iLockType: [args iLockType] strPassword: [args strPassword]];
  [outProtocol writeMessageBeginWithName: @"inputPasswd"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_ResetPasswd_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ResetPasswd_args * args = [[ResetPasswd_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ResetPasswd_result * result = [[ResetPasswd_result alloc] init];
  [mService ResetPasswd: [args strDevCode] iLockType: [args iLockType] strPassword: [args strPassword]];
  [outProtocol writeMessageBeginWithName: @"ResetPasswd"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_modifyPasswd_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  modifyPasswd_args * args = [[modifyPasswd_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ModifyPasswd_result * result = [[ModifyPasswd_result alloc] init];
  [mService modifyPasswd: [args strOldPasswd] strNewPasswd: [args strNewPasswd] iLockType: [args iLockType]];
  [outProtocol writeMessageBeginWithName: @"modifyPasswd"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

